{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/android-chrome-192x192.png","path":"images/android-chrome-192x192.png","modified":1,"renderable":0},{"_id":"source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/images/browserconfig.xml","path":"images/browserconfig.xml","modified":1,"renderable":0},{"_id":"source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/images/mstile-150x150.png","path":"images/mstile-150x150.png","modified":1,"renderable":0},{"_id":"source/images/safari-pinned-tab.svg","path":"images/safari-pinned-tab.svg","modified":1,"renderable":0},{"_id":"source/images/site.webmanifest","path":"images/site.webmanifest","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/android-chrome-512x512.png","path":"images/android-chrome-512x512.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"273383120b99b7fb751cdeaa2a4151c2a81c5bcd","modified":1559107637722},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1559096044703},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1559096044703},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1559096044703},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1559096044703},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1559096044706},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1559096044703},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1559096044706},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1559096044706},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1559096044707},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1559096044708},{"_id":"themes/next/bower.json","hash":"9bc3900396a375f817db47d147bb6d207c661678","modified":1559096044708},{"_id":"themes/next/_config.yml","hash":"5c2d62bfdfe8f09738a8d923fdfa4fb0e21e9aab","modified":1559272779846},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1559096044714},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1559096044709},{"_id":"themes/next/package.json","hash":"0284636ddd0e06ae593f4887819f3a35b08c1370","modified":1559096044730},{"_id":"themes/next/.DS_Store","hash":"44a765e74675352e44c78f68b25890d5e52a71f5","modified":1559110450110},{"_id":"source/_posts/git early EOF.md","hash":"e3a4b424b55eaaf4decfbd6f8e432f34282d81e8","modified":1559703863155},{"_id":"source/_posts/.DS_Store","hash":"04d43bf2a6060aa4ad5972f06b531e918e20b92e","modified":1558671323211},{"_id":"source/_posts/maven-docker.md","hash":"db727e41e733850ec2b3f9fda95348c37031a522","modified":1559630256976},{"_id":"source/_posts/hello-world.md","hash":"c1a3adeb74c5806f1c36669ded392574a9c81d1e","modified":1559629969322},{"_id":"source/_posts/初探ELK日志管理体系.md","hash":"80ab3b5b9b7b72c71ee5d63d0d632b3e49c48c33","modified":1559630139774},{"_id":"source/categories/index.md","hash":"54d8be47af27788a10023b782552bcb897ad861c","modified":1544244233000},{"_id":"source/_posts/集群Session共享.md","hash":"cd30fed3f107f5f23b1e093d58524820e016347d","modified":1559630153688},{"_id":"source/_posts/服务器上安装Docker.md","hash":"c851e3ac6c0425fba654775ea9efa648bf2fd18d","modified":1559630226069},{"_id":"source/images/android-chrome-192x192.png","hash":"5e0e1c5e6a6ce451fa0a9da4e01f54b465dd9b3f","modified":1547581970000},{"_id":"source/images/.DS_Store","hash":"5880f1c01a60e99c5e748825970c9fd0aa017f8d","modified":1559107642734},{"_id":"source/images/apple-touch-icon.png","hash":"c6ec892c07a401f1f50868cbb926c95e454c6edb","modified":1547581970000},{"_id":"source/images/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1547581970000},{"_id":"source/images/favicon-16x16.png","hash":"684492b08b5afdfa0551b498fce3e328ee90d6a3","modified":1547581970000},{"_id":"source/images/favicon-32x32.png","hash":"a0ca43a8e77ce521816736b74a5e6993f6c05d72","modified":1547581970000},{"_id":"source/images/mstile-150x150.png","hash":"9f85f82f3b9af0c2cbfbe6964c8e16d5ac6ba129","modified":1547581970000},{"_id":"source/images/safari-pinned-tab.svg","hash":"be3f25eb52a949b3284610e1b16a47da6adfdc80","modified":1547581970000},{"_id":"source/images/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1547581970000},{"_id":"source/images/favicon.ico","hash":"014d56ec02c5391291ac7e9ddad037ac3816ee35","modified":1547581970000},{"_id":"source/tags/index.md","hash":"4394e9c85debd387237cc1b7b53bf697fedb0aa3","modified":1544248066000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1559096044693},{"_id":"themes/next/.git/config","hash":"e78135eac1ede2f3ca79747839db482790e54b3c","modified":1559096044695},{"_id":"themes/next/.git/index","hash":"2f69ff7de150d2114e76970bcda3fc960957f378","modified":1559096044757},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1559096025674},{"_id":"source/uploads/avatar.jpg","hash":"51a01b006cc062e13f4b4569295a108f42cbeb4d","modified":1544170097000},{"_id":"themes/next/.git/packed-refs","hash":"a86fd2d04bb4c53abc010be9cd7dd2de0dd14967","modified":1559096044692},{"_id":"themes/next/.git/sourcetreeconfig","hash":"d081ccdffef1f176f20612c02dd32a54658cc5b8","modified":1559101431251},{"_id":"themes/next/.git/FETCH_HEAD","hash":"41791d716b6e79431c177b0a3b2cc14e2a0ba0c8","modified":1559101431035},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1559096044703},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1559096044704},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1559096044704},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1559096044703},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1559096044704},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1559096044704},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1559096044704},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1559096044705},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1559096044705},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1559096044705},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1559096044705},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1559096044705},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1559096044705},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1559096044705},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1559096044710},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1559096044709},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1559096044710},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1559096044711},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1559096044711},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1559096044711},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1559096044711},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1559096044712},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1559096044712},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1559096044714},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1559096044714},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1559096044714},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1559096044714},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1559096044714},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1559096044715},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1559096044715},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1559096044715},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1559096044715},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1559096044716},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1559096044716},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1559096044716},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1559096044716},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1559096044716},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1559096044716},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1559096044717},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1559096044717},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1559096044717},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1559096044717},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1559096044717},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1559096044718},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1559096044729},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1559096044729},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1559096044729},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1559096044729},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1559096044729},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1559096044730},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1559096044730},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1559096044730},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1559096044731},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1559096044755},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1559096044755},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1559096044755},{"_id":"themes/next/source/.DS_Store","hash":"ffcf8de2eb4af2cf59686b2eb1d5dcabf498587a","modified":1559110462532},{"_id":"source/images/android-chrome-512x512.png","hash":"a7bdc3e104b547e67899c4d547dcbcf432ae5b7a","modified":1547581970000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559096044743},{"_id":"source/_posts/maven-docker/Dockerfile内容.png","hash":"9fc45653936ee0142e3848c536fd20bb6dc9d3dd","modified":1558670962537},{"_id":"source/_posts/maven-docker/目录结构.png","hash":"cd2a2815be96506a6603da8897b8ab7ec14d26ab","modified":1558669790087},{"_id":"source/_posts/hello-world/version.png","hash":"4c98209afa54e130bdc01e6170bbe45ed4c76873","modified":1544098378000},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构1-副本.jpg","hash":"33ff5b8fdbebbf7cfb08533c92f96959fcd7702e","modified":1547177816000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1559096025675},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1559096025676},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1559096025677},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1559096025678},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1559096025678},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1559096025676},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1559096025679},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1559096025677},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1559096025675},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1559096025678},{"_id":"themes/next/.git/logs/HEAD","hash":"81bde2308312f32487bf12f0591db913e4e0e0f9","modified":1559096044694},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1559096025674},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1559096044704},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1559096025679},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1559096044704},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1559096044704},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1559096044704},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1559096044712},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1559096044712},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1559096044713},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1559096044713},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1559096044714},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1559096044714},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1559096044714},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1559096044718},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559096044718},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1559096044718},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1559096044718},{"_id":"themes/next/layout/_macro/post.swig","hash":"8a8a2865b09e933c454d9a68e54dd9063dc8c559","modified":1559096044719},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1559096044720},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1559096044720},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1559096044720},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1559096044720},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1559096044721},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1559096044721},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1559096044723},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1559096044723},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1559096044723},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1559096044723},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1559096044724},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1559096044724},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1559096044726},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1559096044726},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1559096044726},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"9be7c2c9cef63006866d1232c5289901e46be7ed","modified":1559096044727},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1559096044727},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1559096044727},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1559096044728},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1559096044728},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1559096044728},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1559096044728},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1559096044730},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1559096044730},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1559096044730},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1559096044731},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1559096044731},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1559096044731},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1559096044731},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1559096044732},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1559096044728},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1559096044731},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1559096044732},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1559096044732},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1559096044732},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1559096044732},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1559096044732},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1559096044732},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1559096044743},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1559096044729},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1559096044744},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1559096044744},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1559096044744},{"_id":"themes/next/source/images/avatar.jpg","hash":"51a01b006cc062e13f4b4569295a108f42cbeb4d","modified":1544170097000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1559096044744},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1559096044744},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1559096044744},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1559096044744},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1559096044745},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1559096044745},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1559096044745},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1559096044745},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1559096044745},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559096044746},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1559096044746},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559096044746},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1559096044746},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1559096044746},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1559096044746},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1559096044746},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1559096044746},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1559096044746},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1559096044746},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1559096044747},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1559096044747},{"_id":"themes/next/source/js/.DS_Store","hash":"5f1583c7b27b3aba5a7e0feaf0029e96e605b0e4","modified":1559100820502},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1559096044747},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1559096044747},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1559096044747},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1559096044747},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559096044740},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559096044740},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559096044740},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559096044743},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1559096044743},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构1.png","hash":"86b1b1b55d1b7bddeb3053faa92d8e8e72d61405","modified":1547108489000},{"_id":"themes/next/.git/refs/heads/master","hash":"6b5bb21b05d017800f719efe3115ae99e2c64bbd","modified":1559096044694},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构2-beats.png","hash":"49ada0721d7bdd45c1a1fbde21e0f54a50eb3d2a","modified":1547108596000},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构3-beats.png","hash":"dc240414c05aa9e59589019399dc6ea8c508a293","modified":1547108772000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1559096044718},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1559096044718},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1559096044720},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1559096044720},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1559096044720},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1559096044720},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1559096044721},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1559096044721},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1559096044721},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1559096044721},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1559096044721},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1559096044721},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1559096044721},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1559096044721},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1559096044722},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1559096044722},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1559096044722},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1559096044722},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1559096044722},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1559096044722},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1559096044723},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1559096044723},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1559096044723},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1559096044723},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1559096044723},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1559096044724},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1559096044724},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1559096044724},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1559096044724},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1559096044724},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1559096044724},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1559096044725},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1559096044726},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1559096044726},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1559096044726},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1559096044726},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1559096044726},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1559096044726},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1559096044726},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1559096044727},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1559096044727},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1559096044727},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1559096044727},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1559096044727},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1559096044727},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1559096044729},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1559096044729},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1559096044740},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1559096044729},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1559096044740},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1559096044740},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1559096044740},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1559096044743},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1559096044743},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1559096044743},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1559096044747},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1559096044743},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1559096044747},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1559096044748},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1559096044748},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1559096044748},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1559096044748},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1559096044748},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1559096044754},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1559096044754},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1559096044755},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1559096044693},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"81bde2308312f32487bf12f0591db913e4e0e0f9","modified":1559096044695},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1559096044739},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1559096044739},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1559096044739},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1559096044740},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1559096044740},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1559096044740},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1559096044732},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1559096044739},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1559096044732},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1559096044736},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1559096044740},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1559096044743},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1559096044742},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1559096044743},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1559096044748},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1559096044749},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1559096044748},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1559096044753},{"_id":"themes/next/.git/objects/pack/pack-5cd3e6682a578671f8f1a2adcb5761edacde50de.idx","hash":"540e58673dee6053d050622b9903f6d51c267601","modified":1559096044674},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559096044752},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559096044752},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1559096044754},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"81bde2308312f32487bf12f0591db913e4e0e0f9","modified":1559096044693},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1559096044734},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1559096044735},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1559096044736},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1559096044733},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1559096044737},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1559096044738},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1559096044739},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1559096044739},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1559096044739},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1559096044739},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1559096044739},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1559096044739},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559096044741},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1559096044742},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559096044751},{"_id":"themes/next/.git/objects/pack/pack-5cd3e6682a578671f8f1a2adcb5761edacde50de.pack","hash":"0cf5a41833ac3de4fb78dac203c1bc5deb96aebc","modified":1559096044672},{"_id":"public/categories/index.html","hash":"011c14cde15c606b96171862fc78b8b919ae6876","modified":1559703926118},{"_id":"public/tags/index.html","hash":"f30b981afe70ede611d0af53a78a8d72a5efdcca","modified":1559703926118},{"_id":"public/archives/2018/index.html","hash":"7e81479ef66a663e90d3a271408f3d6329303884","modified":1559703926119},{"_id":"public/archives/2018/12/index.html","hash":"26c62bc23a16740eacd769435345461c402b2fa7","modified":1559703926119},{"_id":"public/archives/2019/index.html","hash":"d18a454968ac48e3919d1f5e6c126c0c063fafda","modified":1559703926119},{"_id":"public/archives/2019/01/index.html","hash":"7c1490a7167297ebeefa02f21efd0b7f4e617f75","modified":1559703926119},{"_id":"public/archives/2019/04/index.html","hash":"2b792f37bbee48e4e515b3ef9f3c130ea8058d37","modified":1559703926119},{"_id":"public/archives/2019/06/index.html","hash":"689d898ee11347981f9de41745b9e44299a652e8","modified":1559703926119},{"_id":"public/categories/踩到了/index.html","hash":"c56c4d392868354b4db7011bda788a99a09bc4c8","modified":1559703926119},{"_id":"public/categories/学到了/index.html","hash":"5b2504724daa8a5143384f0d282d4170548be41a","modified":1559703926119},{"_id":"public/tags/Git/index.html","hash":"bba26de50e876a252539977ae88f1d0040e350a2","modified":1559703926119},{"_id":"public/tags/Docker/index.html","hash":"40bb549ee47b80497ec74f2c2e2ad7bb3b77aa82","modified":1559703926119},{"_id":"public/tags/Hexo/index.html","hash":"03ff9b1e3e7d9747a881a9c2c9c4d4fe755f76d4","modified":1559703926119},{"_id":"public/tags/GitHub/index.html","hash":"0358d0badc0351695c16a4e50eb9d66ce6bf1cb7","modified":1559703926119},{"_id":"public/tags/ElasticSearch/index.html","hash":"cc114b9edf58a414ce396b5f8149aaae1e7efe36","modified":1559703926119},{"_id":"public/tags/Logstash/index.html","hash":"a9886e75940a8f38584b9ae0c107ff7daab9a8a5","modified":1559703926119},{"_id":"public/tags/Kibana/index.html","hash":"7de0c0316201d3d38259c0e1998c330620b7838e","modified":1559703926119},{"_id":"public/tags/Session/index.html","hash":"fc2a1656d7b3e0d678753ab258cf8cf2ecde1b1c","modified":1559703926119},{"_id":"public/2019/06/04/git early EOF/index.html","hash":"991321df88d77c863884993a63f701d761780d4f","modified":1559703926119},{"_id":"public/2019/04/20/maven-docker/index.html","hash":"cc4325e7f9d620fe0569110c533c76d3fb8498b7","modified":1559703926119},{"_id":"public/2019/04/20/服务器上安装Docker/index.html","hash":"e67d5038a03be1701196e3d99c64fe7838427658","modified":1559703926120},{"_id":"public/2019/01/10/初探ELK日志管理体系/index.html","hash":"289e602d6f88d2bc83a58cc004fe6ab072da8af0","modified":1559703926120},{"_id":"public/2018/12/17/集群Session共享/index.html","hash":"4c1c1c4e55284d6ae81f7ae4689cf0795c437e1a","modified":1559703926120},{"_id":"public/2018/12/09/hello-world/index.html","hash":"dc4df80dfefdf9ce2fd3c3051d1dbecba3a9a4de","modified":1559703926120},{"_id":"public/archives/index.html","hash":"3642a65be2449eea8e4c1583a479812b18036855","modified":1559703926120},{"_id":"public/index.html","hash":"b271c2f0ebd999e921e459ef0d432b1024ad0fa0","modified":1559703926120},{"_id":"public/images/android-chrome-192x192.png","hash":"5e0e1c5e6a6ce451fa0a9da4e01f54b465dd9b3f","modified":1559703926124},{"_id":"public/images/apple-touch-icon.png","hash":"c6ec892c07a401f1f50868cbb926c95e454c6edb","modified":1559703926124},{"_id":"public/images/favicon-16x16.png","hash":"684492b08b5afdfa0551b498fce3e328ee90d6a3","modified":1559703926124},{"_id":"public/images/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1559703926124},{"_id":"public/images/favicon-32x32.png","hash":"a0ca43a8e77ce521816736b74a5e6993f6c05d72","modified":1559703926124},{"_id":"public/images/mstile-150x150.png","hash":"9f85f82f3b9af0c2cbfbe6964c8e16d5ac6ba129","modified":1559703926124},{"_id":"public/images/safari-pinned-tab.svg","hash":"be3f25eb52a949b3284610e1b16a47da6adfdc80","modified":1559703926124},{"_id":"public/images/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1559703926124},{"_id":"public/images/favicon.ico","hash":"014d56ec02c5391291ac7e9ddad037ac3816ee35","modified":1559703926124},{"_id":"public/uploads/avatar.jpg","hash":"51a01b006cc062e13f4b4569295a108f42cbeb4d","modified":1559703926124},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1559703926124},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1559703926124},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1559703926124},{"_id":"public/images/avatar.jpg","hash":"51a01b006cc062e13f4b4569295a108f42cbeb4d","modified":1559703926124},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1559703926124},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1559703926124},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1559703926124},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1559703926124},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1559703926125},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1559703926125},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1559703926125},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1559703926125},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1559703926125},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559703926125},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1559703926125},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1559703926125},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1559703926125},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1559703926125},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1559703926125},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1559703926125},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1559703926125},{"_id":"public/2018/12/09/hello-world/version.png","hash":"4c98209afa54e130bdc01e6170bbe45ed4c76873","modified":1559703926125},{"_id":"public/2019/04/20/maven-docker/目录结构.png","hash":"cd2a2815be96506a6603da8897b8ab7ec14d26ab","modified":1559703926125},{"_id":"public/2019/04/20/maven-docker/Dockerfile内容.png","hash":"9fc45653936ee0142e3848c536fd20bb6dc9d3dd","modified":1559703926125},{"_id":"public/2019/01/10/初探ELK日志管理体系/ELK架构1-副本.jpg","hash":"33ff5b8fdbebbf7cfb08533c92f96959fcd7702e","modified":1559703926125},{"_id":"public/images/android-chrome-512x512.png","hash":"a7bdc3e104b547e67899c4d547dcbcf432ae5b7a","modified":1559703926479},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1559703926480},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1559703926481},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1559703926484},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1559703926484},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1559703926484},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1559703926484},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1559703926484},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1559703926484},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1559703926484},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1559703926484},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1559703926484},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1559703926484},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1559703926485},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1559703926485},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1559703926485},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1559703926485},{"_id":"public/css/main.css","hash":"6d45e49a8ff7030a287f79219fbee8a9c1c218c5","modified":1559703926485},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1559703926485},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1559703926485},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1559703926485},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1559703926485},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1559703926485},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1559703926485},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1559703926485},{"_id":"public/2019/01/10/初探ELK日志管理体系/ELK架构2-beats.png","hash":"49ada0721d7bdd45c1a1fbde21e0f54a50eb3d2a","modified":1559703926485},{"_id":"public/2019/01/10/初探ELK日志管理体系/ELK架构3-beats.png","hash":"dc240414c05aa9e59589019399dc6ea8c508a293","modified":1559703926485},{"_id":"public/2019/01/10/初探ELK日志管理体系/ELK架构1.png","hash":"86b1b1b55d1b7bddeb3053faa92d8e8e72d61405","modified":1559703926486}],"Category":[{"name":"踩到了","_id":"cjwing2o00004ebdk8163iyyw"},{"name":"学到了","_id":"cjwing2o70009ebdkiiyorf1p"}],"Data":[],"Page":[{"title":"categories","date":"2018-12-08T04:43:02.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-08 12:43:02\ntype: \"categories\"\n---\n","updated":"2018-12-08T04:43:53.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjwing2nu0001ebdkw6ghxe4s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-12-08T04:26:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-08 12:26:17\ntype: \"tags\"\n---","updated":"2018-12-08T05:47:46.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjwing2nx0003ebdkxvz4hrbg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"git clone报错 early EOF + index-pack failed","date":"2019-06-04T06:09:00.000Z","comments":1,"_content":"\n> ## 问题描述\n\n最近研究swagger的时候，想要克隆GitHub上的swagger-ui和swagger-editor项目。但是clone失败，出现fatal: early EOF；fatal: index-pack failed错误信息。\n<!-- more -->\n``` bash\n$ git clone https://github.com/swagger-api/swagger-ui.git\nCloning into 'swagger-ui'...\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (6/6), done.\nerror: RPC failed; curl 18 transfer closed with outstanding read data remaining\nfatal: the remote end hung up unexpectedly\nfatal: early EOF\nfatal: index-pack failed\n```\n\nclone当前仓库失败，当前仓库一共有6个分支。一开始以为是网络原因导致的，试了几遍还是不行，于是baidu了一下，发现文章博客还挺多的。\n\n> ## 解决方案\n\n* 指定clone深度\n\n    默认会clone整个仓库所有分支，但是整个仓库太大，导致一直失败，于是指定clone深度\n\n    ``` bash\n    $ git clone --depth 1 https://github.com/swagger-api/swagger-ui.git\n    Cloning into 'swagger-ui'...\n    remote: Enumerating objects: 528, done.\n    remote: Counting objects: 100% (528/528), done.\n    remote: Compressing objects: 100% (470/470), done.\n    remote: Total 528 (delta 30), reused 517 (delta 29), pack-reused 0\n    Receiving objects: 100% (528/528), 2.85 MiB | 5.00 KiB/s, done.\n    Resolving deltas: 100% (30/30), done.\n\n    $ cd swagger-ui/\n\n    $ git branch -a && git log\n    * master\n    remotes/origin/HEAD -> origin/master\n    remotes/origin/master\n    commit 54c045fd472a740e7ae3d26148708455fa6358b4 (grafted, HEAD -> master, tag: v3.22.2, origin/master, origin/HEAD)\n    Author: swaggerhub-bot <sh-devops@smartbear.com>\n    Date:   Wed May 22 01:36:53 2019 +0000\n\n        release: v3.22.2\n    ```\n\n    顺利clone仓库，但是会发现这次clone只clone了最新的一次提交历史，故这种clone方式会丢失历史记录。但是可以配合`git fetch --unshallow`找回。\n\n* 如果目标源分支过多，可以指定clone的分支\n\n    ``` bash\n    $ git clone -b master https://example.com/example/example.git\n    ```\n\n* 为Git添加配置项\n\n    在/Users/username/.gitconfig文件中添加配置\n\n    ``` bash\n    # git config --add core.compression -1 // git目录下可使用命令\n    # git config --help // 查看手册了解参数意义\n    [core]\n        compression = -1    // 压缩，value = [-1，9]\n    ```\n\n    这种做法具体我没有试，因为我发现即使还没有配置这个参数，从第一次clone失败的的输出信息中第4行也可以发现，针对swagger-ui项目，默认远端就会进行压缩。\n\n> ## 总结\n\n针对当前问题，第一种解决办法最为行之有效，因为我不需要clone整个仓库，也不需要知道提交历史。\n\n> ## 后话\n\n后来又踩了一个自己挖的坑！\n\n``` bash\n# 在上述过程中随手使用了下面这条命令，本想试试能不能看到文档，结果没有输出，当时并没在意。\nswagger-ui $ git config core.compression --help\nswagger-ui $ \n\n# 后来使用npm install后报错\nswagger-ui $ npm install\n...\nnpm ERR! Error while executing:\nnpm ERR! /usr/local/bin/git ls-remote -h -t git://github.com/ev1stensberg/generator.git\nnpm ERR! \nnpm ERR! fatal: bad numeric config value '--help' for 'core.compression': invalid unit\nnpm ERR! \nnpm ERR! exited with error code: 128\n...\n\n# 然后意识到自己成功的把core.compression的value设置成了'--help'\n# 使用find命令查找所有gitconfig文件\nswagger-ui $ find / -iname \"*gitconfig*\"\nfind: /usr/sbin/authserver: Permission denied\n/usr/local/git/etc/gitconfig\n...\n/Users/${your.username}/.gitconfig\n...\n\n# 查阅了这两处以后，并没有发现core.compression\n# 使用git config -l查看git配置\nswagger-ui $ git config -l\n...\ncore.ignorecase=true\ncore.precomposeunicode=true\ncore.compression=--help\nremote.origin.url=https://github.com/swagger-api/swagger-ui.git\nremote.origin.fetch=+refs/heads/master:refs/remotes/origin/master\n...\n\n# 有点想不明白。。。\n# 后来猜测git config -l看到的是所有的配置，又重新查看了上面找到的两处gitconfig的内容，发现正好是使用命令后输出内容的前2/3部分\n# 于是猜测git config -l是按层级关系从大到小输出了所有git配置信息，那么最后这部分内容应该是来自于项目本身，因此在swagger-ui目录下查找，发现.git目录下有个config文件\nswagger-ui $ cat .git/config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n        ignorecase = true\n        precomposeunicode = true\n        compression = --help\n[remote \"origin\"]\n        url = https://github.com/swagger-api/swagger-ui.git\n        fetch = +refs/heads/master:refs/remotes/origin/master\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n\n# 终于找到了\n```\n\n后来又测试了一下这两条命令：\n\n* 命令1：git config core.compression -1\n* 命令2：git config --add core.compression -1\n\n命令1是对已经存在的值做修改，命令2是添加配置属性。并且执行命令2必定成功，也就是添加的属性不管是否已经存在，也会再次添加，然后再使用命令1会报错，提示同一个key有多个value。然而，在属性不存在的情况下执行命令1并不会报错，而是直接添加属性，所以没必要使用命令2。\n","source":"_posts/git early EOF.md","raw":"---\ntitle: git clone报错 early EOF + index-pack failed\ndate: 2019-06-04 14:09\ntags: [Git]\ncategories: 踩到了\ncomments: true\n---\n\n> ## 问题描述\n\n最近研究swagger的时候，想要克隆GitHub上的swagger-ui和swagger-editor项目。但是clone失败，出现fatal: early EOF；fatal: index-pack failed错误信息。\n<!-- more -->\n``` bash\n$ git clone https://github.com/swagger-api/swagger-ui.git\nCloning into 'swagger-ui'...\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (6/6), done.\nerror: RPC failed; curl 18 transfer closed with outstanding read data remaining\nfatal: the remote end hung up unexpectedly\nfatal: early EOF\nfatal: index-pack failed\n```\n\nclone当前仓库失败，当前仓库一共有6个分支。一开始以为是网络原因导致的，试了几遍还是不行，于是baidu了一下，发现文章博客还挺多的。\n\n> ## 解决方案\n\n* 指定clone深度\n\n    默认会clone整个仓库所有分支，但是整个仓库太大，导致一直失败，于是指定clone深度\n\n    ``` bash\n    $ git clone --depth 1 https://github.com/swagger-api/swagger-ui.git\n    Cloning into 'swagger-ui'...\n    remote: Enumerating objects: 528, done.\n    remote: Counting objects: 100% (528/528), done.\n    remote: Compressing objects: 100% (470/470), done.\n    remote: Total 528 (delta 30), reused 517 (delta 29), pack-reused 0\n    Receiving objects: 100% (528/528), 2.85 MiB | 5.00 KiB/s, done.\n    Resolving deltas: 100% (30/30), done.\n\n    $ cd swagger-ui/\n\n    $ git branch -a && git log\n    * master\n    remotes/origin/HEAD -> origin/master\n    remotes/origin/master\n    commit 54c045fd472a740e7ae3d26148708455fa6358b4 (grafted, HEAD -> master, tag: v3.22.2, origin/master, origin/HEAD)\n    Author: swaggerhub-bot <sh-devops@smartbear.com>\n    Date:   Wed May 22 01:36:53 2019 +0000\n\n        release: v3.22.2\n    ```\n\n    顺利clone仓库，但是会发现这次clone只clone了最新的一次提交历史，故这种clone方式会丢失历史记录。但是可以配合`git fetch --unshallow`找回。\n\n* 如果目标源分支过多，可以指定clone的分支\n\n    ``` bash\n    $ git clone -b master https://example.com/example/example.git\n    ```\n\n* 为Git添加配置项\n\n    在/Users/username/.gitconfig文件中添加配置\n\n    ``` bash\n    # git config --add core.compression -1 // git目录下可使用命令\n    # git config --help // 查看手册了解参数意义\n    [core]\n        compression = -1    // 压缩，value = [-1，9]\n    ```\n\n    这种做法具体我没有试，因为我发现即使还没有配置这个参数，从第一次clone失败的的输出信息中第4行也可以发现，针对swagger-ui项目，默认远端就会进行压缩。\n\n> ## 总结\n\n针对当前问题，第一种解决办法最为行之有效，因为我不需要clone整个仓库，也不需要知道提交历史。\n\n> ## 后话\n\n后来又踩了一个自己挖的坑！\n\n``` bash\n# 在上述过程中随手使用了下面这条命令，本想试试能不能看到文档，结果没有输出，当时并没在意。\nswagger-ui $ git config core.compression --help\nswagger-ui $ \n\n# 后来使用npm install后报错\nswagger-ui $ npm install\n...\nnpm ERR! Error while executing:\nnpm ERR! /usr/local/bin/git ls-remote -h -t git://github.com/ev1stensberg/generator.git\nnpm ERR! \nnpm ERR! fatal: bad numeric config value '--help' for 'core.compression': invalid unit\nnpm ERR! \nnpm ERR! exited with error code: 128\n...\n\n# 然后意识到自己成功的把core.compression的value设置成了'--help'\n# 使用find命令查找所有gitconfig文件\nswagger-ui $ find / -iname \"*gitconfig*\"\nfind: /usr/sbin/authserver: Permission denied\n/usr/local/git/etc/gitconfig\n...\n/Users/${your.username}/.gitconfig\n...\n\n# 查阅了这两处以后，并没有发现core.compression\n# 使用git config -l查看git配置\nswagger-ui $ git config -l\n...\ncore.ignorecase=true\ncore.precomposeunicode=true\ncore.compression=--help\nremote.origin.url=https://github.com/swagger-api/swagger-ui.git\nremote.origin.fetch=+refs/heads/master:refs/remotes/origin/master\n...\n\n# 有点想不明白。。。\n# 后来猜测git config -l看到的是所有的配置，又重新查看了上面找到的两处gitconfig的内容，发现正好是使用命令后输出内容的前2/3部分\n# 于是猜测git config -l是按层级关系从大到小输出了所有git配置信息，那么最后这部分内容应该是来自于项目本身，因此在swagger-ui目录下查找，发现.git目录下有个config文件\nswagger-ui $ cat .git/config\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n        ignorecase = true\n        precomposeunicode = true\n        compression = --help\n[remote \"origin\"]\n        url = https://github.com/swagger-api/swagger-ui.git\n        fetch = +refs/heads/master:refs/remotes/origin/master\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n\n# 终于找到了\n```\n\n后来又测试了一下这两条命令：\n\n* 命令1：git config core.compression -1\n* 命令2：git config --add core.compression -1\n\n命令1是对已经存在的值做修改，命令2是添加配置属性。并且执行命令2必定成功，也就是添加的属性不管是否已经存在，也会再次添加，然后再使用命令1会报错，提示同一个key有多个value。然而，在属性不存在的情况下执行命令1并不会报错，而是直接添加属性，所以没必要使用命令2。\n","slug":"git early EOF","published":1,"updated":"2019-06-05T03:04:23.155Z","layout":"post","photos":[],"link":"","_id":"cjwing2nq0000ebdkgwxa2yk3","content":"<blockquote>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2></blockquote>\n<p>最近研究swagger的时候，想要克隆GitHub上的swagger-ui和swagger-editor项目。但是clone失败，出现fatal: early EOF；fatal: index-pack failed错误信息。<br><a id=\"more\"></a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'swagger-ui'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 6, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (6/6), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (6/6), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">error: RPC failed; curl 18 transfer closed with outstanding <span class=\"built_in\">read</span> data remaining</span><br><span class=\"line\">fatal: the remote end hung up unexpectedly</span><br><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure></p>\n<p>clone当前仓库失败，当前仓库一共有6个分支。一开始以为是网络原因导致的，试了几遍还是不行，于是baidu了一下，发现文章博客还挺多的。</p>\n<blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2></blockquote>\n<ul>\n<li><p>指定clone深度</p>\n<p>  默认会clone整个仓库所有分支，但是整个仓库太大，导致一直失败，于是指定clone深度</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --depth 1 https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'swagger-ui'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 528, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (528/528), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (470/470), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 528 (delta 30), reused 517 (delta 29), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (528/528), 2.85 MiB | 5.00 KiB/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Resolving deltas: 100% (30/30), <span class=\"keyword\">done</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> swagger-ui/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch -a &amp;&amp; git <span class=\"built_in\">log</span></span><br><span class=\"line\">* master</span><br><span class=\"line\">remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">remotes/origin/master</span><br><span class=\"line\">commit 54c045fd472a740e7ae3d26148708455fa6358b4 (grafted, HEAD -&gt; master, tag: v3.22.2, origin/master, origin/HEAD)</span><br><span class=\"line\">Author: swaggerhub-bot &lt;sh-devops@smartbear.com&gt;</span><br><span class=\"line\">Date:   Wed May 22 01:36:53 2019 +0000</span><br><span class=\"line\"></span><br><span class=\"line\">    release: v3.22.2</span><br></pre></td></tr></table></figure>\n<p>  顺利clone仓库，但是会发现这次clone只clone了最新的一次提交历史，故这种clone方式会丢失历史记录。但是可以配合<code>git fetch --unshallow</code>找回。</p>\n</li>\n<li><p>如果目标源分支过多，可以指定clone的分支</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b master https://example.com/example/example.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为Git添加配置项</p>\n<p>  在/Users/username/.gitconfig文件中添加配置</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git config --add core.compression -1 // git目录下可使用命令</span></span><br><span class=\"line\"><span class=\"comment\"># git config --help // 查看手册了解参数意义</span></span><br><span class=\"line\">[core]</span><br><span class=\"line\">    compression = -1    // 压缩，value = [-1，9]</span><br></pre></td></tr></table></figure>\n<p>  这种做法具体我没有试，因为我发现即使还没有配置这个参数，从第一次clone失败的的输出信息中第4行也可以发现，针对swagger-ui项目，默认远端就会进行压缩。</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2></blockquote>\n<p>针对当前问题，第一种解决办法最为行之有效，因为我不需要clone整个仓库，也不需要知道提交历史。</p>\n<blockquote>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2></blockquote>\n<p>后来又踩了一个自己挖的坑！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在上述过程中随手使用了下面这条命令，本想试试能不能看到文档，结果没有输出，当时并没在意。</span></span><br><span class=\"line\">swagger-ui $ git config core.compression --<span class=\"built_in\">help</span></span><br><span class=\"line\">swagger-ui $ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后来使用npm install后报错</span></span><br><span class=\"line\">swagger-ui $ npm install</span><br><span class=\"line\">...</span><br><span class=\"line\">npm ERR! Error <span class=\"keyword\">while</span> executing:</span><br><span class=\"line\">npm ERR! /usr/<span class=\"built_in\">local</span>/bin/git ls-remote -h -t git://github.com/ev1stensberg/generator.git</span><br><span class=\"line\">npm ERR! </span><br><span class=\"line\">npm ERR! fatal: bad numeric config value <span class=\"string\">'--help'</span> <span class=\"keyword\">for</span> <span class=\"string\">'core.compression'</span>: invalid unit</span><br><span class=\"line\">npm ERR! </span><br><span class=\"line\">npm ERR! exited with error code: 128</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后意识到自己成功的把core.compression的value设置成了'--help'</span></span><br><span class=\"line\"><span class=\"comment\"># 使用find命令查找所有gitconfig文件</span></span><br><span class=\"line\">swagger-ui $ find / -iname <span class=\"string\">\"*gitconfig*\"</span></span><br><span class=\"line\">find: /usr/sbin/authserver: Permission denied</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/git/etc/gitconfig</span><br><span class=\"line\">...</span><br><span class=\"line\">/Users/<span class=\"variable\">$&#123;your.username&#125;</span>/.gitconfig</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查阅了这两处以后，并没有发现core.compression</span></span><br><span class=\"line\"><span class=\"comment\"># 使用git config -l查看git配置</span></span><br><span class=\"line\">swagger-ui $ git config -l</span><br><span class=\"line\">...</span><br><span class=\"line\">core.ignorecase=<span class=\"literal\">true</span></span><br><span class=\"line\">core.precomposeunicode=<span class=\"literal\">true</span></span><br><span class=\"line\">core.compression=--<span class=\"built_in\">help</span></span><br><span class=\"line\">remote.origin.url=https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">remote.origin.fetch=+refs/heads/master:refs/remotes/origin/master</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有点想不明白。。。</span></span><br><span class=\"line\"><span class=\"comment\"># 后来猜测git config -l看到的是所有的配置，又重新查看了上面找到的两处gitconfig的内容，发现正好是使用命令后输出内容的前2/3部分</span></span><br><span class=\"line\"><span class=\"comment\"># 于是猜测git config -l是按层级关系从大到小输出了所有git配置信息，那么最后这部分内容应该是来自于项目本身，因此在swagger-ui目录下查找，发现.git目录下有个config文件</span></span><br><span class=\"line\">swagger-ui $ cat .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">        repositoryformatversion = 0</span><br><span class=\"line\">        filemode = <span class=\"literal\">true</span></span><br><span class=\"line\">        bare = <span class=\"literal\">false</span></span><br><span class=\"line\">        logallrefupdates = <span class=\"literal\">true</span></span><br><span class=\"line\">        ignorecase = <span class=\"literal\">true</span></span><br><span class=\"line\">        precomposeunicode = <span class=\"literal\">true</span></span><br><span class=\"line\">        compression = --<span class=\"built_in\">help</span></span><br><span class=\"line\">[remote <span class=\"string\">\"origin\"</span>]</span><br><span class=\"line\">        url = https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">        fetch = +refs/heads/master:refs/remotes/origin/master</span><br><span class=\"line\">[branch <span class=\"string\">\"master\"</span>]</span><br><span class=\"line\">        remote = origin</span><br><span class=\"line\">        merge = refs/heads/master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 终于找到了</span></span><br></pre></td></tr></table></figure>\n<p>后来又测试了一下这两条命令：</p>\n<ul>\n<li>命令1：git config core.compression -1</li>\n<li>命令2：git config –add core.compression -1</li>\n</ul>\n<p>命令1是对已经存在的值做修改，命令2是添加配置属性。并且执行命令2必定成功，也就是添加的属性不管是否已经存在，也会再次添加，然后再使用命令1会报错，提示同一个key有多个value。然而，在属性不存在的情况下执行命令1并不会报错，而是直接添加属性，所以没必要使用命令2。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2></blockquote>\n<p>最近研究swagger的时候，想要克隆GitHub上的swagger-ui和swagger-editor项目。但是clone失败，出现fatal: early EOF；fatal: index-pack failed错误信息。<br></p>","more":"<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'swagger-ui'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 6, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (6/6), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (6/6), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">error: RPC failed; curl 18 transfer closed with outstanding <span class=\"built_in\">read</span> data remaining</span><br><span class=\"line\">fatal: the remote end hung up unexpectedly</span><br><span class=\"line\">fatal: early EOF</span><br><span class=\"line\">fatal: index-pack failed</span><br></pre></td></tr></table></figure><p></p>\n<p>clone当前仓库失败，当前仓库一共有6个分支。一开始以为是网络原因导致的，试了几遍还是不行，于是baidu了一下，发现文章博客还挺多的。</p>\n<blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2></blockquote>\n<ul>\n<li><p>指定clone深度</p>\n<p>  默认会clone整个仓库所有分支，但是整个仓库太大，导致一直失败，于是指定clone深度</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> --depth 1 https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'swagger-ui'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 528, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (528/528), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (470/470), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 528 (delta 30), reused 517 (delta 29), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (528/528), 2.85 MiB | 5.00 KiB/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Resolving deltas: 100% (30/30), <span class=\"keyword\">done</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> swagger-ui/</span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch -a &amp;&amp; git <span class=\"built_in\">log</span></span><br><span class=\"line\">* master</span><br><span class=\"line\">remotes/origin/HEAD -&gt; origin/master</span><br><span class=\"line\">remotes/origin/master</span><br><span class=\"line\">commit 54c045fd472a740e7ae3d26148708455fa6358b4 (grafted, HEAD -&gt; master, tag: v3.22.2, origin/master, origin/HEAD)</span><br><span class=\"line\">Author: swaggerhub-bot &lt;sh-devops@smartbear.com&gt;</span><br><span class=\"line\">Date:   Wed May 22 01:36:53 2019 +0000</span><br><span class=\"line\"></span><br><span class=\"line\">    release: v3.22.2</span><br></pre></td></tr></table></figure>\n<p>  顺利clone仓库，但是会发现这次clone只clone了最新的一次提交历史，故这种clone方式会丢失历史记录。但是可以配合<code>git fetch --unshallow</code>找回。</p>\n</li>\n<li><p>如果目标源分支过多，可以指定clone的分支</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> -b master https://example.com/example/example.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为Git添加配置项</p>\n<p>  在/Users/username/.gitconfig文件中添加配置</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git config --add core.compression -1 // git目录下可使用命令</span></span><br><span class=\"line\"><span class=\"comment\"># git config --help // 查看手册了解参数意义</span></span><br><span class=\"line\">[core]</span><br><span class=\"line\">    compression = -1    // 压缩，value = [-1，9]</span><br></pre></td></tr></table></figure>\n<p>  这种做法具体我没有试，因为我发现即使还没有配置这个参数，从第一次clone失败的的输出信息中第4行也可以发现，针对swagger-ui项目，默认远端就会进行压缩。</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2></blockquote>\n<p>针对当前问题，第一种解决办法最为行之有效，因为我不需要clone整个仓库，也不需要知道提交历史。</p>\n<blockquote>\n<h2 id=\"后话\"><a href=\"#后话\" class=\"headerlink\" title=\"后话\"></a>后话</h2></blockquote>\n<p>后来又踩了一个自己挖的坑！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在上述过程中随手使用了下面这条命令，本想试试能不能看到文档，结果没有输出，当时并没在意。</span></span><br><span class=\"line\">swagger-ui $ git config core.compression --<span class=\"built_in\">help</span></span><br><span class=\"line\">swagger-ui $ </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 后来使用npm install后报错</span></span><br><span class=\"line\">swagger-ui $ npm install</span><br><span class=\"line\">...</span><br><span class=\"line\">npm ERR! Error <span class=\"keyword\">while</span> executing:</span><br><span class=\"line\">npm ERR! /usr/<span class=\"built_in\">local</span>/bin/git ls-remote -h -t git://github.com/ev1stensberg/generator.git</span><br><span class=\"line\">npm ERR! </span><br><span class=\"line\">npm ERR! fatal: bad numeric config value <span class=\"string\">'--help'</span> <span class=\"keyword\">for</span> <span class=\"string\">'core.compression'</span>: invalid unit</span><br><span class=\"line\">npm ERR! </span><br><span class=\"line\">npm ERR! exited with error code: 128</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后意识到自己成功的把core.compression的value设置成了'--help'</span></span><br><span class=\"line\"><span class=\"comment\"># 使用find命令查找所有gitconfig文件</span></span><br><span class=\"line\">swagger-ui $ find / -iname <span class=\"string\">\"*gitconfig*\"</span></span><br><span class=\"line\">find: /usr/sbin/authserver: Permission denied</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/git/etc/gitconfig</span><br><span class=\"line\">...</span><br><span class=\"line\">/Users/<span class=\"variable\">$&#123;your.username&#125;</span>/.gitconfig</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查阅了这两处以后，并没有发现core.compression</span></span><br><span class=\"line\"><span class=\"comment\"># 使用git config -l查看git配置</span></span><br><span class=\"line\">swagger-ui $ git config -l</span><br><span class=\"line\">...</span><br><span class=\"line\">core.ignorecase=<span class=\"literal\">true</span></span><br><span class=\"line\">core.precomposeunicode=<span class=\"literal\">true</span></span><br><span class=\"line\">core.compression=--<span class=\"built_in\">help</span></span><br><span class=\"line\">remote.origin.url=https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">remote.origin.fetch=+refs/heads/master:refs/remotes/origin/master</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有点想不明白。。。</span></span><br><span class=\"line\"><span class=\"comment\"># 后来猜测git config -l看到的是所有的配置，又重新查看了上面找到的两处gitconfig的内容，发现正好是使用命令后输出内容的前2/3部分</span></span><br><span class=\"line\"><span class=\"comment\"># 于是猜测git config -l是按层级关系从大到小输出了所有git配置信息，那么最后这部分内容应该是来自于项目本身，因此在swagger-ui目录下查找，发现.git目录下有个config文件</span></span><br><span class=\"line\">swagger-ui $ cat .git/config</span><br><span class=\"line\">[core]</span><br><span class=\"line\">        repositoryformatversion = 0</span><br><span class=\"line\">        filemode = <span class=\"literal\">true</span></span><br><span class=\"line\">        bare = <span class=\"literal\">false</span></span><br><span class=\"line\">        logallrefupdates = <span class=\"literal\">true</span></span><br><span class=\"line\">        ignorecase = <span class=\"literal\">true</span></span><br><span class=\"line\">        precomposeunicode = <span class=\"literal\">true</span></span><br><span class=\"line\">        compression = --<span class=\"built_in\">help</span></span><br><span class=\"line\">[remote <span class=\"string\">\"origin\"</span>]</span><br><span class=\"line\">        url = https://github.com/swagger-api/swagger-ui.git</span><br><span class=\"line\">        fetch = +refs/heads/master:refs/remotes/origin/master</span><br><span class=\"line\">[branch <span class=\"string\">\"master\"</span>]</span><br><span class=\"line\">        remote = origin</span><br><span class=\"line\">        merge = refs/heads/master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 终于找到了</span></span><br></pre></td></tr></table></figure>\n<p>后来又测试了一下这两条命令：</p>\n<ul>\n<li>命令1：git config core.compression -1</li>\n<li>命令2：git config –add core.compression -1</li>\n</ul>\n<p>命令1是对已经存在的值做修改，命令2是添加配置属性。并且执行命令2必定成功，也就是添加的属性不管是否已经存在，也会再次添加，然后再使用命令1会报错，提示同一个key有多个value。然而，在属性不存在的情况下执行命令1并不会报错，而是直接添加属性，所以没必要使用命令2。</p>"},{"title":"使用maven-docker插件自动发布镜像","date":"2019-04-20T02:26:03.000Z","comments":1,"_content":"\n> ## 我现在在哪里\n\n假设现在我们手上有这么一些东西：\n\n1. 一个项目。比如公司的项目，或者你亲手写的HelloDemo\n2. 一台服务器。并且惊奇的发现服务器上已经装好了Docker。还没有？？[点这里]()\n3. 用IDEA打开了项目，并能够正常运行。\n4. 通过相关的ssh软件连接了服务器并处于登陆状态\n\n<!--more-->\n\n> ## 我该怎么办\n\n### 第一步 在工程的pom.xml文件中新增插件\n\n第一种方式：插件中定义，而不额外增加Dockerfile文件，适合定义简单镜像，比如现在这种写demo的情况。\n\n``` Yaml\n<plugins>\n    <!-- docker -->\n    <plugin>\n        <groupId>com.spotify</groupId>\n        <artifactId>docker-maven-plugin</artifactId>\n        <version>1.0.0</version>\n        <executions>\n            <!--执行 mvn package 时 自动 执行 mvn docker:build-->\n            <execution>\n                <id>build-image</id>\n                <phase>package</phase>\n                <goals>\n                    <goal>build</goal>\n                </goals>\n            </execution>\n        </executions>\n        <configuration>\n            <imageName>${docker.image.prefix}/${project.artifactId}:latest</imageName>\n            <baseImage>java</baseImage>\n            <entryPoint>[\"java\",\"-jar\",\"/${project.build.finalName}.jar}\"]</entryPoint>\n            <dockerHost> http://10.10.10.107:2375 </dockerHost>\n            <!-- <dockerDirectory>src/main/docker</dockerDirectory> -->\n            <resources>\n                <resource>\n                    <targetPath>/</targetPath>\n                    <directory>${project.build.directory}</directory>\n                    <include>${project.build.finalName}.jar</include>\n                </resource>\n            </resources>\n        </configuration>\n    </plugin>\n```\n\n第二种方式：通用方式，更易定制镜像\n\n``` Yaml\n<plugins>\n    <!-- docker -->\n    <plugin>\n        <groupId>com.spotify</groupId>\n        <artifactId>docker-maven-plugin</artifactId>\n        <version>1.0.0</version>\n        <executions>\n            <!--执行 mvn package 时 自动 执行 mvn docker:build-->\n            <execution>\n                <id>build-image</id>\n                <phase>package</phase>\n                <goals>\n                    <goal>build</goal>\n                </goals>\n            </execution>\n        </executions>\n        <configuration>\n            <imageName>${docker.image.prefix}/${project.artifactId}:latest</imageName>\n            <!-- <baseImage>java</baseImage> -->\n            <!-- <entryPoint>[\"java\",\"-jar\",\"/${project.build.finalName}.jar}\"]</entryPoint> -->\n            <dockerHost>http://10.10.10.107:2375</dockerHost>\n            <dockerDirectory>src/main/docker</dockerDirectory>\n            <resources>\n                <resource>\n                    <targetPath>/</targetPath>\n                    <directory>${project.build.directory}</directory>\n                    <include>${project.build.finalName}.jar</include>\n                </resource>\n            </resources>\n        </configuration>\n    </plugin>\n```\n\n目录结构：\n\n![添加了docker文件夹的目录结构](maven-docker/目录结构.png)\n\nDockerfile内容：\n\n![Dockerfile内容](maven-docker/Dockerfile内容.png)\n\n### 第二步 打开服务器上Docker的远程API\n\n老大丢我的服务器是什么发行版？\n\n``` bash\n[root@localhost local]# cat /etc/os-release\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\n```\n\n确定发行版后，确定docker.service的位置并编辑它。\n\n``` bash\nvim /usr/lib/systemd/system/docker.service\n```\n\n部分内容如下，搜索ExecStart并在后面追加 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock ，是追加！原样追加！\n\n``` bash\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nBindsTo=containerd.service\nAfter=network-online.target firewalld.service containerd.service\nWants=network-online.target\nRequires=docker.socket\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutSec=0\nRestartSec=2\nRestart=always\n\n# Note that StartLimit* options were moved from \"Service\" to \"Unit\" in systemd 229.\n# Both the old, and new location are accepted by systemd 229 and up, so using the old location\n# to make them work for either version of systemd.\nStartLimitBurst=3\n```\n\n不要忘记重启docker的守护线程和docker，查看2375端口是否被docker监听，检查2375端口是否成功对外开放\n\n``` bash\n[root@localhost local]# systemctl daemon-reload\n[root@localhost local]# systemctl restart docker\n[root@localhost local]# netstat -anp|grep 2375\ntcp6       0      0 :::2375                 :::*                    LISTEN      9151/dockerd\n[root@localhost local]# curl 127.0.0.1:2375/info\n{\"ID\":\"EVL2:VMEB:CUJ6:KL5D:AHS5:RBQU:KTTK:ZGWU:GQCO:ULZ4:6ZP2:2MYW\",\"Containers\":0,\"ContainersRunning\":0,\"ContainersPaused\":0,\"ContainersStopped\":0,\"Images\":0,\"Driver\":\"overlay2\",\"DriverStatus\":[[\"Backing Filesystem\",\"xfs\"],[\"Supports d_type\",\"true\"],[\"Native Overlay Diff\",\"true\"]],\"SystemStatus\":null,\"Plugins\":{\"Volume\":[\"local\"],\"Network\":[\"bridge\",\"host\",\"macvlan\",\"null\",\"overlay\"],\"Authorization\":null,\"Log\":[\"awslogs\",\"fluentd\",\"gcplogs\",\"gelf\",\"journald\",\"json-file\",\"local\",\"logentries\",\"splunk\",\"syslog\"]},\"MemoryLimit\":true,\"SwapLimit\":true,\"KernelMemory\":true,\"CpuCfsPeriod\":true,\"CpuCfsQuota\":true......\n```\n\n### 第三步 增加环境变量（Windows系统选做）\n\nWindows系统：其他文章都有这一步，需要在系统环境变量中新增Docker_HOST，值为tcp://http://服务器IP:2375。\nMac系统：本人macOS major并没有添加环境变量依然可以实现通信。猜测Windows也是可以不用的，因为pom.xml中已经写明了<dockerHost>http://10.10.10.107:2375</dockerHost>，并且IDEA是一个功能强大的编辑器。当然想法有待验证。\n\n> ## 验证插件是否有效\n\n1. 第一个坑\n\n   * 报错\n\n        执行mvn package报错：找不到docker目录\n\n        ``` plain\n        [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (build-image) on project api: Exception caught: basedir src/main/docker does not exist -> [Help 1]\n        [ERROR] \n        [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n        [ERROR] Re-run Maven using the -X switch to enable full debug logging.\n        ......\n        ```\n\n   * 解决\n\n        什么！瞎了嘛！就在那还找不到？解决办法很简单，修改pom.xml，在路径前面加上项目路径`<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>`。来自[Stack Overflow上的解决方案](https://stackoverflow.com/questions/47308102/failed-to-execute-goal-com-spotifydocker-maven-plugin1-0-0build-exception-cau)\n\n   * 思考：\n\n        因为别人的文章中用的都是demo工程，而我用的是一个项目，并且没有在parent的pom里面加插件，而只用了一个api模块做测试，在模块pom中增加docker-maven插件，所以要补全路径。\n\n    正常运行mvn package后，控制台开始走日志信息，大意是先打包成jar，然后插件工作，根据Dockerfile生成镜像发布到服务器，登陆服务器使用docker image ls命令能看到新增的镜像。\n\n2. 第二个坑\n\n这个坑搞了半天，不说了都是泪，估计也没有人和我一样蠢。","source":"_posts/maven-docker.md","raw":"---\ntitle: 使用maven-docker插件自动发布镜像\ndate: 2019-04-20 10:26:03\ntags: [Docker]\ncategories: 学到了\ncomments: true\n---\n\n> ## 我现在在哪里\n\n假设现在我们手上有这么一些东西：\n\n1. 一个项目。比如公司的项目，或者你亲手写的HelloDemo\n2. 一台服务器。并且惊奇的发现服务器上已经装好了Docker。还没有？？[点这里]()\n3. 用IDEA打开了项目，并能够正常运行。\n4. 通过相关的ssh软件连接了服务器并处于登陆状态\n\n<!--more-->\n\n> ## 我该怎么办\n\n### 第一步 在工程的pom.xml文件中新增插件\n\n第一种方式：插件中定义，而不额外增加Dockerfile文件，适合定义简单镜像，比如现在这种写demo的情况。\n\n``` Yaml\n<plugins>\n    <!-- docker -->\n    <plugin>\n        <groupId>com.spotify</groupId>\n        <artifactId>docker-maven-plugin</artifactId>\n        <version>1.0.0</version>\n        <executions>\n            <!--执行 mvn package 时 自动 执行 mvn docker:build-->\n            <execution>\n                <id>build-image</id>\n                <phase>package</phase>\n                <goals>\n                    <goal>build</goal>\n                </goals>\n            </execution>\n        </executions>\n        <configuration>\n            <imageName>${docker.image.prefix}/${project.artifactId}:latest</imageName>\n            <baseImage>java</baseImage>\n            <entryPoint>[\"java\",\"-jar\",\"/${project.build.finalName}.jar}\"]</entryPoint>\n            <dockerHost> http://10.10.10.107:2375 </dockerHost>\n            <!-- <dockerDirectory>src/main/docker</dockerDirectory> -->\n            <resources>\n                <resource>\n                    <targetPath>/</targetPath>\n                    <directory>${project.build.directory}</directory>\n                    <include>${project.build.finalName}.jar</include>\n                </resource>\n            </resources>\n        </configuration>\n    </plugin>\n```\n\n第二种方式：通用方式，更易定制镜像\n\n``` Yaml\n<plugins>\n    <!-- docker -->\n    <plugin>\n        <groupId>com.spotify</groupId>\n        <artifactId>docker-maven-plugin</artifactId>\n        <version>1.0.0</version>\n        <executions>\n            <!--执行 mvn package 时 自动 执行 mvn docker:build-->\n            <execution>\n                <id>build-image</id>\n                <phase>package</phase>\n                <goals>\n                    <goal>build</goal>\n                </goals>\n            </execution>\n        </executions>\n        <configuration>\n            <imageName>${docker.image.prefix}/${project.artifactId}:latest</imageName>\n            <!-- <baseImage>java</baseImage> -->\n            <!-- <entryPoint>[\"java\",\"-jar\",\"/${project.build.finalName}.jar}\"]</entryPoint> -->\n            <dockerHost>http://10.10.10.107:2375</dockerHost>\n            <dockerDirectory>src/main/docker</dockerDirectory>\n            <resources>\n                <resource>\n                    <targetPath>/</targetPath>\n                    <directory>${project.build.directory}</directory>\n                    <include>${project.build.finalName}.jar</include>\n                </resource>\n            </resources>\n        </configuration>\n    </plugin>\n```\n\n目录结构：\n\n![添加了docker文件夹的目录结构](maven-docker/目录结构.png)\n\nDockerfile内容：\n\n![Dockerfile内容](maven-docker/Dockerfile内容.png)\n\n### 第二步 打开服务器上Docker的远程API\n\n老大丢我的服务器是什么发行版？\n\n``` bash\n[root@localhost local]# cat /etc/os-release\nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\n```\n\n确定发行版后，确定docker.service的位置并编辑它。\n\n``` bash\nvim /usr/lib/systemd/system/docker.service\n```\n\n部分内容如下，搜索ExecStart并在后面追加 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock ，是追加！原样追加！\n\n``` bash\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nBindsTo=containerd.service\nAfter=network-online.target firewalld.service containerd.service\nWants=network-online.target\nRequires=docker.socket\n\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutSec=0\nRestartSec=2\nRestart=always\n\n# Note that StartLimit* options were moved from \"Service\" to \"Unit\" in systemd 229.\n# Both the old, and new location are accepted by systemd 229 and up, so using the old location\n# to make them work for either version of systemd.\nStartLimitBurst=3\n```\n\n不要忘记重启docker的守护线程和docker，查看2375端口是否被docker监听，检查2375端口是否成功对外开放\n\n``` bash\n[root@localhost local]# systemctl daemon-reload\n[root@localhost local]# systemctl restart docker\n[root@localhost local]# netstat -anp|grep 2375\ntcp6       0      0 :::2375                 :::*                    LISTEN      9151/dockerd\n[root@localhost local]# curl 127.0.0.1:2375/info\n{\"ID\":\"EVL2:VMEB:CUJ6:KL5D:AHS5:RBQU:KTTK:ZGWU:GQCO:ULZ4:6ZP2:2MYW\",\"Containers\":0,\"ContainersRunning\":0,\"ContainersPaused\":0,\"ContainersStopped\":0,\"Images\":0,\"Driver\":\"overlay2\",\"DriverStatus\":[[\"Backing Filesystem\",\"xfs\"],[\"Supports d_type\",\"true\"],[\"Native Overlay Diff\",\"true\"]],\"SystemStatus\":null,\"Plugins\":{\"Volume\":[\"local\"],\"Network\":[\"bridge\",\"host\",\"macvlan\",\"null\",\"overlay\"],\"Authorization\":null,\"Log\":[\"awslogs\",\"fluentd\",\"gcplogs\",\"gelf\",\"journald\",\"json-file\",\"local\",\"logentries\",\"splunk\",\"syslog\"]},\"MemoryLimit\":true,\"SwapLimit\":true,\"KernelMemory\":true,\"CpuCfsPeriod\":true,\"CpuCfsQuota\":true......\n```\n\n### 第三步 增加环境变量（Windows系统选做）\n\nWindows系统：其他文章都有这一步，需要在系统环境变量中新增Docker_HOST，值为tcp://http://服务器IP:2375。\nMac系统：本人macOS major并没有添加环境变量依然可以实现通信。猜测Windows也是可以不用的，因为pom.xml中已经写明了<dockerHost>http://10.10.10.107:2375</dockerHost>，并且IDEA是一个功能强大的编辑器。当然想法有待验证。\n\n> ## 验证插件是否有效\n\n1. 第一个坑\n\n   * 报错\n\n        执行mvn package报错：找不到docker目录\n\n        ``` plain\n        [ERROR] Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (build-image) on project api: Exception caught: basedir src/main/docker does not exist -> [Help 1]\n        [ERROR] \n        [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n        [ERROR] Re-run Maven using the -X switch to enable full debug logging.\n        ......\n        ```\n\n   * 解决\n\n        什么！瞎了嘛！就在那还找不到？解决办法很简单，修改pom.xml，在路径前面加上项目路径`<dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>`。来自[Stack Overflow上的解决方案](https://stackoverflow.com/questions/47308102/failed-to-execute-goal-com-spotifydocker-maven-plugin1-0-0build-exception-cau)\n\n   * 思考：\n\n        因为别人的文章中用的都是demo工程，而我用的是一个项目，并且没有在parent的pom里面加插件，而只用了一个api模块做测试，在模块pom中增加docker-maven插件，所以要补全路径。\n\n    正常运行mvn package后，控制台开始走日志信息，大意是先打包成jar，然后插件工作，根据Dockerfile生成镜像发布到服务器，登陆服务器使用docker image ls命令能看到新增的镜像。\n\n2. 第二个坑\n\n这个坑搞了半天，不说了都是泪，估计也没有人和我一样蠢。","slug":"maven-docker","published":1,"updated":"2019-06-04T06:37:36.976Z","layout":"post","photos":[],"link":"","_id":"cjwing2nv0002ebdkpzfr2gcr","content":"<blockquote>\n<h2 id=\"我现在在哪里\"><a href=\"#我现在在哪里\" class=\"headerlink\" title=\"我现在在哪里\"></a>我现在在哪里</h2></blockquote>\n<p>假设现在我们手上有这么一些东西：</p>\n<ol>\n<li>一个项目。比如公司的项目，或者你亲手写的HelloDemo</li>\n<li>一台服务器。并且惊奇的发现服务器上已经装好了Docker。还没有？？<a href=\"\">点这里</a></li>\n<li>用IDEA打开了项目，并能够正常运行。</li>\n<li>通过相关的ssh软件连接了服务器并处于登陆状态</li>\n</ol>\n<a id=\"more\"></a>\n<blockquote>\n<h2 id=\"我该怎么办\"><a href=\"#我该怎么办\" class=\"headerlink\" title=\"我该怎么办\"></a>我该怎么办</h2></blockquote>\n<h3 id=\"第一步-在工程的pom-xml文件中新增插件\"><a href=\"#第一步-在工程的pom-xml文件中新增插件\" class=\"headerlink\" title=\"第一步 在工程的pom.xml文件中新增插件\"></a>第一步 在工程的pom.xml文件中新增插件</h3><p>第一种方式：插件中定义，而不额外增加Dockerfile文件，适合定义简单镜像，比如现在这种写demo的情况。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&lt;plugins&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;!--</span> <span class=\"string\">docker</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;plugin&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;version&gt;1.0.0&lt;/version&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;executions&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--执行</span> <span class=\"string\">mvn</span> <span class=\"string\">package</span> <span class=\"string\">时</span> <span class=\"string\">自动</span> <span class=\"string\">执行</span> <span class=\"string\">mvn</span> <span class=\"attr\">docker:build--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;execution&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;id&gt;build-image&lt;/id&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;phase&gt;package&lt;/phase&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;goals&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;goal&gt;build&lt;/goal&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/goals&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/execution&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/executions&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;configuration&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:latest&lt;/imageName&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;baseImage&gt;java&lt;/baseImage&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;entryPoint&gt;[\"java\",\"-jar\",\"/$&#123;project.build.finalName&#125;.jar&#125;\"]&lt;/entryPoint&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;dockerHost&gt;</span> <span class=\"attr\">http://10.10.10.107:2375</span> <span class=\"string\">&lt;/dockerHost&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--</span> <span class=\"string\">&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;resources&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;resource&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;targetPath&gt;/&lt;/targetPath&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/resource&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/resources&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/configuration&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第二种方式：通用方式，更易定制镜像</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&lt;plugins&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;!--</span> <span class=\"string\">docker</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;plugin&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;version&gt;1.0.0&lt;/version&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;executions&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--执行</span> <span class=\"string\">mvn</span> <span class=\"string\">package</span> <span class=\"string\">时</span> <span class=\"string\">自动</span> <span class=\"string\">执行</span> <span class=\"string\">mvn</span> <span class=\"attr\">docker:build--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;execution&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;id&gt;build-image&lt;/id&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;phase&gt;package&lt;/phase&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;goals&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;goal&gt;build&lt;/goal&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/goals&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/execution&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/executions&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;configuration&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:latest&lt;/imageName&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--</span> <span class=\"string\">&lt;baseImage&gt;java&lt;/baseImage&gt;</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--</span> <span class=\"string\">&lt;entryPoint&gt;[\"java\",\"-jar\",\"/$&#123;project.build.finalName&#125;.jar&#125;\"]&lt;/entryPoint&gt;</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;dockerHost&gt;http://10.10.10.107:2375&lt;/dockerHost&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;resources&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;resource&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;targetPath&gt;/&lt;/targetPath&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/resource&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/resources&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/configuration&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure>\n<p>目录结构：</p>\n<p><img src=\"/2019/04/20/maven-docker/目录结构.png\" alt=\"添加了docker文件夹的目录结构\"></p>\n<p>Dockerfile内容：</p>\n<p><img src=\"/2019/04/20/maven-docker/Dockerfile内容.png\" alt=\"Dockerfile内容\"></p>\n<h3 id=\"第二步-打开服务器上Docker的远程API\"><a href=\"#第二步-打开服务器上Docker的远程API\" class=\"headerlink\" title=\"第二步 打开服务器上Docker的远程API\"></a>第二步 打开服务器上Docker的远程API</h3><p>老大丢我的服务器是什么发行版？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># cat /etc/os-release</span></span><br><span class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></span><br><span class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></span><br><span class=\"line\">ID=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></span><br><span class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></span><br></pre></td></tr></table></figure>\n<p>确定发行版后，确定docker.service的位置并编辑它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n<p>部分内容如下，搜索ExecStart并在后面追加 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock ，是追加！原样追加！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Docker Application Container Engine</span><br><span class=\"line\">Documentation=https://docs.docker.com</span><br><span class=\"line\">BindsTo=containerd.service</span><br><span class=\"line\">After=network-online.target firewalld.service containerd.service</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\">Requires=docker.socket</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\"><span class=\"comment\"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class=\"line\"><span class=\"comment\"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class=\"line\"><span class=\"comment\"># for containers run by docker</span></span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">TimeoutSec=0</span><br><span class=\"line\">RestartSec=2</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note that StartLimit* options were moved from \"Service\" to \"Unit\" in systemd 229.</span></span><br><span class=\"line\"><span class=\"comment\"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class=\"line\"><span class=\"comment\"># to make them work for either version of systemd.</span></span><br><span class=\"line\">StartLimitBurst=3</span><br></pre></td></tr></table></figure>\n<p>不要忘记重启docker的守护线程和docker，查看2375端口是否被docker监听，检查2375端口是否成功对外开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># systemctl daemon-reload</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># systemctl restart docker</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># netstat -anp|grep 2375</span></span><br><span class=\"line\">tcp6       0      0 :::2375                 :::*                    LISTEN      9151/dockerd</span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># curl 127.0.0.1:2375/info</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"ID\"</span>:<span class=\"string\">\"EVL2:VMEB:CUJ6:KL5D:AHS5:RBQU:KTTK:ZGWU:GQCO:ULZ4:6ZP2:2MYW\"</span>,<span class=\"string\">\"Containers\"</span>:0,<span class=\"string\">\"ContainersRunning\"</span>:0,<span class=\"string\">\"ContainersPaused\"</span>:0,<span class=\"string\">\"ContainersStopped\"</span>:0,<span class=\"string\">\"Images\"</span>:0,<span class=\"string\">\"Driver\"</span>:<span class=\"string\">\"overlay2\"</span>,<span class=\"string\">\"DriverStatus\"</span>:[[<span class=\"string\">\"Backing Filesystem\"</span>,<span class=\"string\">\"xfs\"</span>],[<span class=\"string\">\"Supports d_type\"</span>,<span class=\"string\">\"true\"</span>],[<span class=\"string\">\"Native Overlay Diff\"</span>,<span class=\"string\">\"true\"</span>]],<span class=\"string\">\"SystemStatus\"</span>:null,<span class=\"string\">\"Plugins\"</span>:&#123;<span class=\"string\">\"Volume\"</span>:[<span class=\"string\">\"local\"</span>],<span class=\"string\">\"Network\"</span>:[<span class=\"string\">\"bridge\"</span>,<span class=\"string\">\"host\"</span>,<span class=\"string\">\"macvlan\"</span>,<span class=\"string\">\"null\"</span>,<span class=\"string\">\"overlay\"</span>],<span class=\"string\">\"Authorization\"</span>:null,<span class=\"string\">\"Log\"</span>:[<span class=\"string\">\"awslogs\"</span>,<span class=\"string\">\"fluentd\"</span>,<span class=\"string\">\"gcplogs\"</span>,<span class=\"string\">\"gelf\"</span>,<span class=\"string\">\"journald\"</span>,<span class=\"string\">\"json-file\"</span>,<span class=\"string\">\"local\"</span>,<span class=\"string\">\"logentries\"</span>,<span class=\"string\">\"splunk\"</span>,<span class=\"string\">\"syslog\"</span>]&#125;,<span class=\"string\">\"MemoryLimit\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"SwapLimit\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"KernelMemory\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"CpuCfsPeriod\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"CpuCfsQuota\"</span>:<span class=\"literal\">true</span>......</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步-增加环境变量（Windows系统选做）\"><a href=\"#第三步-增加环境变量（Windows系统选做）\" class=\"headerlink\" title=\"第三步 增加环境变量（Windows系统选做）\"></a>第三步 增加环境变量（Windows系统选做）</h3><p>Windows系统：其他文章都有这一步，需要在系统环境变量中新增Docker_HOST，值为tcp://http://服务器IP:2375。<br>Mac系统：本人macOS major并没有添加环境变量依然可以实现通信。猜测Windows也是可以不用的，因为pom.xml中已经写明了<dockerhost><a href=\"http://10.10.10.107:2375\" target=\"_blank\" rel=\"noopener\">http://10.10.10.107:2375</a></dockerhost>，并且IDEA是一个功能强大的编辑器。当然想法有待验证。</p>\n<blockquote>\n<h2 id=\"验证插件是否有效\"><a href=\"#验证插件是否有效\" class=\"headerlink\" title=\"验证插件是否有效\"></a>验证插件是否有效</h2></blockquote>\n<ol>\n<li><p>第一个坑</p>\n<ul>\n<li><p>报错</p>\n<p>   执行mvn package报错：找不到docker目录</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (build-image) on project api: Exception caught: basedir src/main/docker does not exist -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决</p>\n<p>   什么！瞎了嘛！就在那还找不到？解决办法很简单，修改pom.xml，在路径前面加上项目路径<code>&lt;dockerDirectory&gt;${project.basedir}/src/main/docker&lt;/dockerDirectory&gt;</code>。来自<a href=\"https://stackoverflow.com/questions/47308102/failed-to-execute-goal-com-spotifydocker-maven-plugin1-0-0build-exception-cau\" target=\"_blank\" rel=\"noopener\">Stack Overflow上的解决方案</a></p>\n</li>\n<li><p>思考：</p>\n<p>   因为别人的文章中用的都是demo工程，而我用的是一个项目，并且没有在parent的pom里面加插件，而只用了一个api模块做测试，在模块pom中增加docker-maven插件，所以要补全路径。</p>\n<p>正常运行mvn package后，控制台开始走日志信息，大意是先打包成jar，然后插件工作，根据Dockerfile生成镜像发布到服务器，登陆服务器使用docker image ls命令能看到新增的镜像。</p>\n</li>\n</ul>\n</li>\n<li><p>第二个坑</p>\n</li>\n</ol>\n<p>这个坑搞了半天，不说了都是泪，估计也没有人和我一样蠢。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h2 id=\"我现在在哪里\"><a href=\"#我现在在哪里\" class=\"headerlink\" title=\"我现在在哪里\"></a>我现在在哪里</h2></blockquote>\n<p>假设现在我们手上有这么一些东西：</p>\n<ol>\n<li>一个项目。比如公司的项目，或者你亲手写的HelloDemo</li>\n<li>一台服务器。并且惊奇的发现服务器上已经装好了Docker。还没有？？<a href=\"\">点这里</a></li>\n<li>用IDEA打开了项目，并能够正常运行。</li>\n<li>通过相关的ssh软件连接了服务器并处于登陆状态</li>\n</ol>","more":"<blockquote>\n<h2 id=\"我该怎么办\"><a href=\"#我该怎么办\" class=\"headerlink\" title=\"我该怎么办\"></a>我该怎么办</h2></blockquote>\n<h3 id=\"第一步-在工程的pom-xml文件中新增插件\"><a href=\"#第一步-在工程的pom-xml文件中新增插件\" class=\"headerlink\" title=\"第一步 在工程的pom.xml文件中新增插件\"></a>第一步 在工程的pom.xml文件中新增插件</h3><p>第一种方式：插件中定义，而不额外增加Dockerfile文件，适合定义简单镜像，比如现在这种写demo的情况。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&lt;plugins&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;!--</span> <span class=\"string\">docker</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;plugin&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;version&gt;1.0.0&lt;/version&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;executions&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--执行</span> <span class=\"string\">mvn</span> <span class=\"string\">package</span> <span class=\"string\">时</span> <span class=\"string\">自动</span> <span class=\"string\">执行</span> <span class=\"string\">mvn</span> <span class=\"attr\">docker:build--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;execution&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;id&gt;build-image&lt;/id&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;phase&gt;package&lt;/phase&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;goals&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;goal&gt;build&lt;/goal&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/goals&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/execution&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/executions&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;configuration&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:latest&lt;/imageName&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;baseImage&gt;java&lt;/baseImage&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;entryPoint&gt;[\"java\",\"-jar\",\"/$&#123;project.build.finalName&#125;.jar&#125;\"]&lt;/entryPoint&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;dockerHost&gt;</span> <span class=\"attr\">http://10.10.10.107:2375</span> <span class=\"string\">&lt;/dockerHost&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--</span> <span class=\"string\">&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;resources&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;resource&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;targetPath&gt;/&lt;/targetPath&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/resource&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/resources&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/configuration&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure>\n<p>第二种方式：通用方式，更易定制镜像</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&lt;plugins&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;!--</span> <span class=\"string\">docker</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;plugin&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;version&gt;1.0.0&lt;/version&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;executions&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--执行</span> <span class=\"string\">mvn</span> <span class=\"string\">package</span> <span class=\"string\">时</span> <span class=\"string\">自动</span> <span class=\"string\">执行</span> <span class=\"string\">mvn</span> <span class=\"attr\">docker:build--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;execution&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;id&gt;build-image&lt;/id&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;phase&gt;package&lt;/phase&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;goals&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;goal&gt;build&lt;/goal&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/goals&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/execution&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/executions&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;configuration&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;:latest&lt;/imageName&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--</span> <span class=\"string\">&lt;baseImage&gt;java&lt;/baseImage&gt;</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;!--</span> <span class=\"string\">&lt;entryPoint&gt;[\"java\",\"-jar\",\"/$&#123;project.build.finalName&#125;.jar&#125;\"]&lt;/entryPoint&gt;</span> <span class=\"bullet\">--&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;dockerHost&gt;http://10.10.10.107:2375&lt;/dockerHost&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;resources&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;resource&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;targetPath&gt;/&lt;/targetPath&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span></span><br><span class=\"line\">                    <span class=\"string\">&lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span></span><br><span class=\"line\">                <span class=\"string\">&lt;/resource&gt;</span></span><br><span class=\"line\">            <span class=\"string\">&lt;/resources&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&lt;/configuration&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure>\n<p>目录结构：</p>\n<p><img src=\"/2019/04/20/maven-docker/目录结构.png\" alt=\"添加了docker文件夹的目录结构\"></p>\n<p>Dockerfile内容：</p>\n<p><img src=\"/2019/04/20/maven-docker/Dockerfile内容.png\" alt=\"Dockerfile内容\"></p>\n<h3 id=\"第二步-打开服务器上Docker的远程API\"><a href=\"#第二步-打开服务器上Docker的远程API\" class=\"headerlink\" title=\"第二步 打开服务器上Docker的远程API\"></a>第二步 打开服务器上Docker的远程API</h3><p>老大丢我的服务器是什么发行版？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># cat /etc/os-release</span></span><br><span class=\"line\">NAME=<span class=\"string\">\"CentOS Linux\"</span></span><br><span class=\"line\">VERSION=<span class=\"string\">\"7 (Core)\"</span></span><br><span class=\"line\">ID=<span class=\"string\">\"centos\"</span></span><br><span class=\"line\">ID_LIKE=<span class=\"string\">\"rhel fedora\"</span></span><br><span class=\"line\">VERSION_ID=<span class=\"string\">\"7\"</span></span><br><span class=\"line\">PRETTY_NAME=<span class=\"string\">\"CentOS Linux 7 (Core)\"</span></span><br></pre></td></tr></table></figure>\n<p>确定发行版后，确定docker.service的位置并编辑它。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>\n<p>部分内容如下，搜索ExecStart并在后面追加 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock ，是追加！原样追加！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Docker Application Container Engine</span><br><span class=\"line\">Documentation=https://docs.docker.com</span><br><span class=\"line\">BindsTo=containerd.service</span><br><span class=\"line\">After=network-online.target firewalld.service containerd.service</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\">Requires=docker.socket</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\"><span class=\"comment\"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class=\"line\"><span class=\"comment\"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class=\"line\"><span class=\"comment\"># for containers run by docker</span></span><br><span class=\"line\">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br><span class=\"line\">ExecReload=/bin/<span class=\"built_in\">kill</span> -s HUP <span class=\"variable\">$MAINPID</span></span><br><span class=\"line\">TimeoutSec=0</span><br><span class=\"line\">RestartSec=2</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Note that StartLimit* options were moved from \"Service\" to \"Unit\" in systemd 229.</span></span><br><span class=\"line\"><span class=\"comment\"># Both the old, and new location are accepted by systemd 229 and up, so using the old location</span></span><br><span class=\"line\"><span class=\"comment\"># to make them work for either version of systemd.</span></span><br><span class=\"line\">StartLimitBurst=3</span><br></pre></td></tr></table></figure>\n<p>不要忘记重启docker的守护线程和docker，查看2375端口是否被docker监听，检查2375端口是否成功对外开放</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># systemctl daemon-reload</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># systemctl restart docker</span></span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># netstat -anp|grep 2375</span></span><br><span class=\"line\">tcp6       0      0 :::2375                 :::*                    LISTEN      9151/dockerd</span><br><span class=\"line\">[root@localhost <span class=\"built_in\">local</span>]<span class=\"comment\"># curl 127.0.0.1:2375/info</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"ID\"</span>:<span class=\"string\">\"EVL2:VMEB:CUJ6:KL5D:AHS5:RBQU:KTTK:ZGWU:GQCO:ULZ4:6ZP2:2MYW\"</span>,<span class=\"string\">\"Containers\"</span>:0,<span class=\"string\">\"ContainersRunning\"</span>:0,<span class=\"string\">\"ContainersPaused\"</span>:0,<span class=\"string\">\"ContainersStopped\"</span>:0,<span class=\"string\">\"Images\"</span>:0,<span class=\"string\">\"Driver\"</span>:<span class=\"string\">\"overlay2\"</span>,<span class=\"string\">\"DriverStatus\"</span>:[[<span class=\"string\">\"Backing Filesystem\"</span>,<span class=\"string\">\"xfs\"</span>],[<span class=\"string\">\"Supports d_type\"</span>,<span class=\"string\">\"true\"</span>],[<span class=\"string\">\"Native Overlay Diff\"</span>,<span class=\"string\">\"true\"</span>]],<span class=\"string\">\"SystemStatus\"</span>:null,<span class=\"string\">\"Plugins\"</span>:&#123;<span class=\"string\">\"Volume\"</span>:[<span class=\"string\">\"local\"</span>],<span class=\"string\">\"Network\"</span>:[<span class=\"string\">\"bridge\"</span>,<span class=\"string\">\"host\"</span>,<span class=\"string\">\"macvlan\"</span>,<span class=\"string\">\"null\"</span>,<span class=\"string\">\"overlay\"</span>],<span class=\"string\">\"Authorization\"</span>:null,<span class=\"string\">\"Log\"</span>:[<span class=\"string\">\"awslogs\"</span>,<span class=\"string\">\"fluentd\"</span>,<span class=\"string\">\"gcplogs\"</span>,<span class=\"string\">\"gelf\"</span>,<span class=\"string\">\"journald\"</span>,<span class=\"string\">\"json-file\"</span>,<span class=\"string\">\"local\"</span>,<span class=\"string\">\"logentries\"</span>,<span class=\"string\">\"splunk\"</span>,<span class=\"string\">\"syslog\"</span>]&#125;,<span class=\"string\">\"MemoryLimit\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"SwapLimit\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"KernelMemory\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"CpuCfsPeriod\"</span>:<span class=\"literal\">true</span>,<span class=\"string\">\"CpuCfsQuota\"</span>:<span class=\"literal\">true</span>......</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步-增加环境变量（Windows系统选做）\"><a href=\"#第三步-增加环境变量（Windows系统选做）\" class=\"headerlink\" title=\"第三步 增加环境变量（Windows系统选做）\"></a>第三步 增加环境变量（Windows系统选做）</h3><p>Windows系统：其他文章都有这一步，需要在系统环境变量中新增Docker_HOST，值为tcp://http://服务器IP:2375。<br>Mac系统：本人macOS major并没有添加环境变量依然可以实现通信。猜测Windows也是可以不用的，因为pom.xml中已经写明了<dockerhost><a href=\"http://10.10.10.107:2375\" target=\"_blank\" rel=\"noopener\">http://10.10.10.107:2375</a></dockerhost>，并且IDEA是一个功能强大的编辑器。当然想法有待验证。</p>\n<blockquote>\n<h2 id=\"验证插件是否有效\"><a href=\"#验证插件是否有效\" class=\"headerlink\" title=\"验证插件是否有效\"></a>验证插件是否有效</h2></blockquote>\n<ol>\n<li><p>第一个坑</p>\n<ul>\n<li><p>报错</p>\n<p>   执行mvn package报错：找不到docker目录</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal com.spotify:docker-maven-plugin:1.0.0:build (build-image) on project api: Exception caught: basedir src/main/docker does not exist -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解决</p>\n<p>   什么！瞎了嘛！就在那还找不到？解决办法很简单，修改pom.xml，在路径前面加上项目路径<code>&lt;dockerDirectory&gt;${project.basedir}/src/main/docker&lt;/dockerDirectory&gt;</code>。来自<a href=\"https://stackoverflow.com/questions/47308102/failed-to-execute-goal-com-spotifydocker-maven-plugin1-0-0build-exception-cau\" target=\"_blank\" rel=\"noopener\">Stack Overflow上的解决方案</a></p>\n</li>\n<li><p>思考：</p>\n<p>   因为别人的文章中用的都是demo工程，而我用的是一个项目，并且没有在parent的pom里面加插件，而只用了一个api模块做测试，在模块pom中增加docker-maven插件，所以要补全路径。</p>\n<p>正常运行mvn package后，控制台开始走日志信息，大意是先打包成jar，然后插件工作，根据Dockerfile生成镜像发布到服务器，登陆服务器使用docker image ls命令能看到新增的镜像。</p>\n</li>\n</ul>\n</li>\n<li><p>第二个坑</p>\n</li>\n</ol>\n<p>这个坑搞了半天，不说了都是泪，估计也没有人和我一样蠢。</p>"},{"title":"hexo + github 搭建自己的个人博客","subtitle":"Hello World","date":"2018-12-08T16:00:00.000Z","comments":1,"_content":"\n俗话说人人都有一颗搭博客的心，直到前段时间再次看到一篇名为<<使用hexo+github搭建免费个人博客详细教程>>的文章，不由得兴奋了起来。然而兴奋却不来自于拥有一个个人博客，而是`hexo+github搭建`这个字眼。\n\n<!-- more -->\n\n> ## 闲聊在前\n\n读完开头提到的文章，我并没有马上开始实操，而是又去收集了很多相关的文章，这些文章对我都有帮助，他们的链接我将会在最后列出。读完这些文章理清了很多一开始的认知误区和迷糊的地方，也希望给你更好的启发。\n如果你下定决心了，那么，我首先要告诉你的是搭建博客的途径，我觉得这很重要，能让你不受局限于本文而选择适合自己的方式。\n\n一般来说有三种方式:\n1. 基于Wordpress等一站式解决方案(小白首选)\n2. 基于静态页面+博客框架(如github pages + hexo)\n3. 全面的前后端知识亲手搭建\n\n本文属于第二种情况，如果你选择这种方式那么你需要开始折腾了。知道这一点后我还要告诉你的是下面的内容，关于我刚搭建完博客后的见解。\n\n我把整个过程大致分成两个阶段。第一步先利用hexo搭建一个本地个人博客，第二步利用github让别人也看到你的博客。\n\n关于第一步:\n\nhexo是一个优秀的博客框架(不局限于此)，你只需要在电脑上某处新建一个文件夹，便可以利用hexo帮你搭建属于你的个人博客，当然完事以后这个博客只是躺在你的电脑上而已。除了hexo以外还有别的框架可以供选择，这些框架你可以在我提供的文章链接或别处了解到。另外有趣的是hexo的官网上有这么一段主题叫做 _[迁移](https://hexo.io/zh-cn/docs/migration)_ 的内容，将告诉你怎么将自己在别处的博客全部转移到hexo框架下。\n\n关于第二步:\n\n如果你已经注册了github帐号，那么恭喜你!关于什么是github pages你可以先了解一下，也可以在文末的引用中找到我看过的一篇。简单的说就是要在github上新建一个仓库，仓库的名字很特别，然后在你的本地博客的配置文件中写上这个仓库的地址，最后只需要敲 `hexo deploy` 就可以将博客发布，让别人看到你的博客。事实上就是git帮你自动同步到你新建的仓库，浏览器输入仓库名就可以访问了。当然，这听起来非常的掉价，那么你可以给这个仓库改头换面，弄一个个性化域名。反正我觉得这无所谓，不过别着急后面会告诉你的。\n\n>> 重要:除了github平台，还有其他平台可供选择，比如国内的码云。需要注意的是，在访问速度方面，国内的肯定是要比国外快的。\n\n小结:如果你已经大概清楚这两步你要干什么了，相信我，完全可以跳过准备工作。事实上准备工作的部分被我删掉了，因为我觉得没必要单独说明。\n\n> ## Hexo搭建博客(第一步)\n\n如果第一次使用hexo，那么最好的方式当然是从 [官网的Getting Started](https://hexo.io/docs/) 开始入手。hexo官网支持很多语种，你可以切换到中文。到这里，你一定发现了除了文字教程以外，还有来自b站的视频可供你学习。无论通过何种方式下面你都可以开始搭建博客了，下面我按官网 __开始使用__ 中的目录结构来说一下我的经验。\n\n* 概述 \n\n    这里会告诉你使用hexo前你应该安装好Git和Node.js，当然没有也没关系，因为它会告诉你怎么做。Node.js是hexo需要依赖的环境，而Git在建站的时候你就会知道他有什么用了。Git和Node。js的安装可以安装win系统熟悉的方式下载安装包安装，而Hexo可以通过git bash中输入命令的方式安装。\n    ``` bash\n    $ npm install -g hexo-cli\n    ```\n    全都安装完了以后，建议在cmd或者git bash中查看一下版本，这么做主要是为了确认这些都正确安装了。\n\n    ![它们的安装版本](hello-world/version.png)\n\n* 建站\n    \n    官方一上来就给了三条命令:\n    ``` bash\n    $ hexo init <folder>\n    $ cd <folder>\n    $ npm install\n    ```\n    第一条命令中 < folder > 需要替换成一个文件夹名字，即使这个文件夹不存在也没有关系会主动创建。如果不写，则被hexo认为指代当前文件夹。然后hexo会初始化这个文件夹，在文件夹中生成对应的结构。其实你观察输出语句就会发现，初始化就是利用Git去克隆了一个远程仓库(默认主题的博客站)。其中会夹杂一下WARN但是没有关系，最后是一句INFO  Start blogging with Hexo!到这里你的博客其实就诞生了，后续你只用装修而已。后两条命令就是进入这个文件夹并安装一些东西。\n\n    所以你会发现，如果你是随手在某处打开git bash的话，你的博客就随便安了家。但是没有关系，你可以 ctrl+x 给它找个好地方，记得重新打开git bash。\n    \n* 配置\n\n    这个文件_config.yml中可以进行很多配置，也就是相当于你的装修清单(主题也包含一个这样的文件用于主题配置)，以后你会花费一些时间在这些地方。值得注意的是yml文件的书写格式。\n\n* 命令\n\n    这里官方介绍了一部分主要命令。你会好奇，自己用了三条命令就搭好了博客，难道只能在文件夹里看到它么，甚至不知道它长什么样子，那么再敲两条命令你就可以看到它了。\n    ``` bash\n    hexo generate  //生产静态文件\n    hexo server    //启动服务\n    ```\n\n    然后你就可以打开浏览器输入他给你的地址了http://localhost:4000\n    然后便是你第一次看到你的博客，默认使用的主题是landscape，虽然有点丑但也是很开心的。有时候会遇到4000端口被占用而启动失败，那么只需要换个没占用的端口就好了，拿5000举个例子\n    ``` bash\n    hexo server -p 5000\n    ```\n\n> ## 让大家看到我的博客(第二步)\n\n如果你没有注册过github帐号和使用过仓库的话，那么需要注册一个帐号，然后配置SSH KEY，又到了自己动手(百度)，丰衣足食的时候了。\n\n当你准备好了以后，可以在自己的github上新建一个仓库，这个仓库的名字必须是这样的格式`username.github.io`，如果你已经知道了什么是User Pages的话，想必就明白了。不知道也没有关系，只要确保username是你github帐号的用户名就好了。提示:新建完仓库在cmd或git bash中输入ping username.github.io是可以ping通的。\n\n1. 修改_config.yml\n\n    打开配置文件，找到deploy，然后把它修改正确。\n    ``` yaml\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n        type: git\n        repo: git@github.com:username/username.github.io.git        //换成你自己的仓库\n        branch: master\n    ```\n    将repo换成你自己的仓库地址后，保存。\n\n2. 发布\n\n    在git bash中输入最后一条命令\n    ``` bash\n    hexo deploy     //发布到指定的仓库\n    ```\n\n    如果之前使用`hexo server`命令启动服务还没有停止，记得先 `ctrl + c`停止服务。然后再输入上面的命令，那么这个仓库的GitHub Pages设置会自动设置好，别的文章都是手动去设置，这里提出来，并不是为了有所对比，而是当一切都不顺利的时候，希望你有思路去解决。事实上，发布就是利用Git将静态页面以及样式等同步到github仓库。\n\n    此时你在浏览器就可以直接输入`username.github.io`来访问你的博客了。\n\n> ## 两点补充\n\n* 个性化域名\n\n    关于如何通过个性化域名访问自己的博客，很多文章里都有细致讲解，包括我引用的文章。你需要做的并不多，购买一个域名，进行相关设置。\n\n* 博客主题\n\n    默认的博客主题是landscape，如果你想立刻马上换一个主题，那么我支持你!\n    1. 首先，你需要去Hexo官网的 [Themes](https://hexo.io/themes/) 模块找到一个你喜欢的主题。虽然它的排序方式是以英文字母顺序来的，没有排行榜，目前比较受欢迎的主题有NexT，也是我选用的主题。\n\n    2. 其次，每一个主题都对应一个github仓库，预览主题时你一定能找到指引你去仓库的方式。拿到仓库地址后你只需要将它克隆到本地来。如果你还记得你的博客的目录结构的话，你会发现有一个themes文件夹，打开文件夹后你会看到这里面只有一个文件夹那就是landscape，在这里打开一个git bash将你喜欢的主题仓库克隆下来。\n    ``` bash\n    $ git clone git@github.com:theme-next/hexo-theme-next.git       //以NexT主题为例\n    ```\n\n    3. 最后，如果想让这个主题生效，那么就需要在你的装修清单_config.yml中修改主题。\n    ``` yaml\n    # Extensions\n    ## Plugins: https://hexo.io/plugins/\n    ## Themes: https://hexo.io/themes/\n       theme: next     //默认是landscape，直接修改即可，名称与themes文件夹下主题文件夹同名\n    ```\n    重新发布博客。\n    ``` bash\n    $ hexo clean        //清除\n    $ hexo generate     //重新生成静态页面\n    $ hexo deploy       //发布\n    ```\n    重新在浏览器访问博客，验证是否生效。\n\n> ## 总结在后\n\n啰嗦两句，都说越新的手子字越多，看来的确是这样。第一次写博客，感觉自己的思路很乱，想尽可能的写的细致，让小白也能看得懂，但是怎么也做不到。后来一想，小白已经被我推荐到第一种方式了，留下来的估计都是狠角色，自己倒腾倒腾也就整出来了，也就放心多了。\n\n也不知道自己的文章是什么样的风格，不过搭建一个博客主要也是为了学习，或是总结经验。没打算有人会看得见它，所以又放心了。如果很幸运文章被你看到了，那希望对你是有益的。但如果你发现我哪里写的有问题，记得一定要大声告诉我，欢迎指正。\n\n> ## 引用&感谢\n\n以下无先后顺序，无主观评价，感谢前人种树\n\n* 整理的时候发现我好像在\"抄袭并翻译\"这个大佬，另外这个大佬的文末推荐的文章挺好的\n\n    [https://blog.csdn.net/peterzhen40/article/details/78942293](https://blog.csdn.net/peterzhen40/article/details/78942293)\n\n* github pages的两种类型\n\n    [https://www.cnblogs.com/liuzhi/p/8169255.html](https://www.cnblogs.com/liuzhi/p/8169255.html)\n\n* 本文开头提及的文章\n\n    [https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw](https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw)\n\n* 中途学习了一下markdown语法\n\n    [https://www.cnblogs.com/liugang-vip/p/6337580.html](https://www.cnblogs.com/liugang-vip/p/6337580.html)\n\n* 讲的比较细的一篇文章\n\n    [https://blog.csdn.net/gdutxiaoxu/article/details/53576018](https://blog.csdn.net/gdutxiaoxu/article/details/53576018)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo + github 搭建自己的个人博客\nsubtitle: Hello World\ndate: 2018-12-09\ntags: [Hexo,GitHub]\ncategories: \ncomments: true\n---\n\n俗话说人人都有一颗搭博客的心，直到前段时间再次看到一篇名为<<使用hexo+github搭建免费个人博客详细教程>>的文章，不由得兴奋了起来。然而兴奋却不来自于拥有一个个人博客，而是`hexo+github搭建`这个字眼。\n\n<!-- more -->\n\n> ## 闲聊在前\n\n读完开头提到的文章，我并没有马上开始实操，而是又去收集了很多相关的文章，这些文章对我都有帮助，他们的链接我将会在最后列出。读完这些文章理清了很多一开始的认知误区和迷糊的地方，也希望给你更好的启发。\n如果你下定决心了，那么，我首先要告诉你的是搭建博客的途径，我觉得这很重要，能让你不受局限于本文而选择适合自己的方式。\n\n一般来说有三种方式:\n1. 基于Wordpress等一站式解决方案(小白首选)\n2. 基于静态页面+博客框架(如github pages + hexo)\n3. 全面的前后端知识亲手搭建\n\n本文属于第二种情况，如果你选择这种方式那么你需要开始折腾了。知道这一点后我还要告诉你的是下面的内容，关于我刚搭建完博客后的见解。\n\n我把整个过程大致分成两个阶段。第一步先利用hexo搭建一个本地个人博客，第二步利用github让别人也看到你的博客。\n\n关于第一步:\n\nhexo是一个优秀的博客框架(不局限于此)，你只需要在电脑上某处新建一个文件夹，便可以利用hexo帮你搭建属于你的个人博客，当然完事以后这个博客只是躺在你的电脑上而已。除了hexo以外还有别的框架可以供选择，这些框架你可以在我提供的文章链接或别处了解到。另外有趣的是hexo的官网上有这么一段主题叫做 _[迁移](https://hexo.io/zh-cn/docs/migration)_ 的内容，将告诉你怎么将自己在别处的博客全部转移到hexo框架下。\n\n关于第二步:\n\n如果你已经注册了github帐号，那么恭喜你!关于什么是github pages你可以先了解一下，也可以在文末的引用中找到我看过的一篇。简单的说就是要在github上新建一个仓库，仓库的名字很特别，然后在你的本地博客的配置文件中写上这个仓库的地址，最后只需要敲 `hexo deploy` 就可以将博客发布，让别人看到你的博客。事实上就是git帮你自动同步到你新建的仓库，浏览器输入仓库名就可以访问了。当然，这听起来非常的掉价，那么你可以给这个仓库改头换面，弄一个个性化域名。反正我觉得这无所谓，不过别着急后面会告诉你的。\n\n>> 重要:除了github平台，还有其他平台可供选择，比如国内的码云。需要注意的是，在访问速度方面，国内的肯定是要比国外快的。\n\n小结:如果你已经大概清楚这两步你要干什么了，相信我，完全可以跳过准备工作。事实上准备工作的部分被我删掉了，因为我觉得没必要单独说明。\n\n> ## Hexo搭建博客(第一步)\n\n如果第一次使用hexo，那么最好的方式当然是从 [官网的Getting Started](https://hexo.io/docs/) 开始入手。hexo官网支持很多语种，你可以切换到中文。到这里，你一定发现了除了文字教程以外，还有来自b站的视频可供你学习。无论通过何种方式下面你都可以开始搭建博客了，下面我按官网 __开始使用__ 中的目录结构来说一下我的经验。\n\n* 概述 \n\n    这里会告诉你使用hexo前你应该安装好Git和Node.js，当然没有也没关系，因为它会告诉你怎么做。Node.js是hexo需要依赖的环境，而Git在建站的时候你就会知道他有什么用了。Git和Node。js的安装可以安装win系统熟悉的方式下载安装包安装，而Hexo可以通过git bash中输入命令的方式安装。\n    ``` bash\n    $ npm install -g hexo-cli\n    ```\n    全都安装完了以后，建议在cmd或者git bash中查看一下版本，这么做主要是为了确认这些都正确安装了。\n\n    ![它们的安装版本](hello-world/version.png)\n\n* 建站\n    \n    官方一上来就给了三条命令:\n    ``` bash\n    $ hexo init <folder>\n    $ cd <folder>\n    $ npm install\n    ```\n    第一条命令中 < folder > 需要替换成一个文件夹名字，即使这个文件夹不存在也没有关系会主动创建。如果不写，则被hexo认为指代当前文件夹。然后hexo会初始化这个文件夹，在文件夹中生成对应的结构。其实你观察输出语句就会发现，初始化就是利用Git去克隆了一个远程仓库(默认主题的博客站)。其中会夹杂一下WARN但是没有关系，最后是一句INFO  Start blogging with Hexo!到这里你的博客其实就诞生了，后续你只用装修而已。后两条命令就是进入这个文件夹并安装一些东西。\n\n    所以你会发现，如果你是随手在某处打开git bash的话，你的博客就随便安了家。但是没有关系，你可以 ctrl+x 给它找个好地方，记得重新打开git bash。\n    \n* 配置\n\n    这个文件_config.yml中可以进行很多配置，也就是相当于你的装修清单(主题也包含一个这样的文件用于主题配置)，以后你会花费一些时间在这些地方。值得注意的是yml文件的书写格式。\n\n* 命令\n\n    这里官方介绍了一部分主要命令。你会好奇，自己用了三条命令就搭好了博客，难道只能在文件夹里看到它么，甚至不知道它长什么样子，那么再敲两条命令你就可以看到它了。\n    ``` bash\n    hexo generate  //生产静态文件\n    hexo server    //启动服务\n    ```\n\n    然后你就可以打开浏览器输入他给你的地址了http://localhost:4000\n    然后便是你第一次看到你的博客，默认使用的主题是landscape，虽然有点丑但也是很开心的。有时候会遇到4000端口被占用而启动失败，那么只需要换个没占用的端口就好了，拿5000举个例子\n    ``` bash\n    hexo server -p 5000\n    ```\n\n> ## 让大家看到我的博客(第二步)\n\n如果你没有注册过github帐号和使用过仓库的话，那么需要注册一个帐号，然后配置SSH KEY，又到了自己动手(百度)，丰衣足食的时候了。\n\n当你准备好了以后，可以在自己的github上新建一个仓库，这个仓库的名字必须是这样的格式`username.github.io`，如果你已经知道了什么是User Pages的话，想必就明白了。不知道也没有关系，只要确保username是你github帐号的用户名就好了。提示:新建完仓库在cmd或git bash中输入ping username.github.io是可以ping通的。\n\n1. 修改_config.yml\n\n    打开配置文件，找到deploy，然后把它修改正确。\n    ``` yaml\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n        type: git\n        repo: git@github.com:username/username.github.io.git        //换成你自己的仓库\n        branch: master\n    ```\n    将repo换成你自己的仓库地址后，保存。\n\n2. 发布\n\n    在git bash中输入最后一条命令\n    ``` bash\n    hexo deploy     //发布到指定的仓库\n    ```\n\n    如果之前使用`hexo server`命令启动服务还没有停止，记得先 `ctrl + c`停止服务。然后再输入上面的命令，那么这个仓库的GitHub Pages设置会自动设置好，别的文章都是手动去设置，这里提出来，并不是为了有所对比，而是当一切都不顺利的时候，希望你有思路去解决。事实上，发布就是利用Git将静态页面以及样式等同步到github仓库。\n\n    此时你在浏览器就可以直接输入`username.github.io`来访问你的博客了。\n\n> ## 两点补充\n\n* 个性化域名\n\n    关于如何通过个性化域名访问自己的博客，很多文章里都有细致讲解，包括我引用的文章。你需要做的并不多，购买一个域名，进行相关设置。\n\n* 博客主题\n\n    默认的博客主题是landscape，如果你想立刻马上换一个主题，那么我支持你!\n    1. 首先，你需要去Hexo官网的 [Themes](https://hexo.io/themes/) 模块找到一个你喜欢的主题。虽然它的排序方式是以英文字母顺序来的，没有排行榜，目前比较受欢迎的主题有NexT，也是我选用的主题。\n\n    2. 其次，每一个主题都对应一个github仓库，预览主题时你一定能找到指引你去仓库的方式。拿到仓库地址后你只需要将它克隆到本地来。如果你还记得你的博客的目录结构的话，你会发现有一个themes文件夹，打开文件夹后你会看到这里面只有一个文件夹那就是landscape，在这里打开一个git bash将你喜欢的主题仓库克隆下来。\n    ``` bash\n    $ git clone git@github.com:theme-next/hexo-theme-next.git       //以NexT主题为例\n    ```\n\n    3. 最后，如果想让这个主题生效，那么就需要在你的装修清单_config.yml中修改主题。\n    ``` yaml\n    # Extensions\n    ## Plugins: https://hexo.io/plugins/\n    ## Themes: https://hexo.io/themes/\n       theme: next     //默认是landscape，直接修改即可，名称与themes文件夹下主题文件夹同名\n    ```\n    重新发布博客。\n    ``` bash\n    $ hexo clean        //清除\n    $ hexo generate     //重新生成静态页面\n    $ hexo deploy       //发布\n    ```\n    重新在浏览器访问博客，验证是否生效。\n\n> ## 总结在后\n\n啰嗦两句，都说越新的手子字越多，看来的确是这样。第一次写博客，感觉自己的思路很乱，想尽可能的写的细致，让小白也能看得懂，但是怎么也做不到。后来一想，小白已经被我推荐到第一种方式了，留下来的估计都是狠角色，自己倒腾倒腾也就整出来了，也就放心多了。\n\n也不知道自己的文章是什么样的风格，不过搭建一个博客主要也是为了学习，或是总结经验。没打算有人会看得见它，所以又放心了。如果很幸运文章被你看到了，那希望对你是有益的。但如果你发现我哪里写的有问题，记得一定要大声告诉我，欢迎指正。\n\n> ## 引用&感谢\n\n以下无先后顺序，无主观评价，感谢前人种树\n\n* 整理的时候发现我好像在\"抄袭并翻译\"这个大佬，另外这个大佬的文末推荐的文章挺好的\n\n    [https://blog.csdn.net/peterzhen40/article/details/78942293](https://blog.csdn.net/peterzhen40/article/details/78942293)\n\n* github pages的两种类型\n\n    [https://www.cnblogs.com/liuzhi/p/8169255.html](https://www.cnblogs.com/liuzhi/p/8169255.html)\n\n* 本文开头提及的文章\n\n    [https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw](https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw)\n\n* 中途学习了一下markdown语法\n\n    [https://www.cnblogs.com/liugang-vip/p/6337580.html](https://www.cnblogs.com/liugang-vip/p/6337580.html)\n\n* 讲的比较细的一篇文章\n\n    [https://blog.csdn.net/gdutxiaoxu/article/details/53576018](https://blog.csdn.net/gdutxiaoxu/article/details/53576018)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"hello-world","published":1,"updated":"2019-06-04T06:32:49.322Z","layout":"post","photos":[],"link":"","_id":"cjwing2o20006ebdkrx3apikg","content":"<p>俗话说人人都有一颗搭博客的心，直到前段时间再次看到一篇名为&lt;&lt;使用hexo+github搭建免费个人博客详细教程&gt;&gt;的文章，不由得兴奋了起来。然而兴奋却不来自于拥有一个个人博客，而是<code>hexo+github搭建</code>这个字眼。</p>\n<a id=\"more\"></a>\n<blockquote>\n<h2 id=\"闲聊在前\"><a href=\"#闲聊在前\" class=\"headerlink\" title=\"闲聊在前\"></a>闲聊在前</h2></blockquote>\n<p>读完开头提到的文章，我并没有马上开始实操，而是又去收集了很多相关的文章，这些文章对我都有帮助，他们的链接我将会在最后列出。读完这些文章理清了很多一开始的认知误区和迷糊的地方，也希望给你更好的启发。<br>如果你下定决心了，那么，我首先要告诉你的是搭建博客的途径，我觉得这很重要，能让你不受局限于本文而选择适合自己的方式。</p>\n<p>一般来说有三种方式:</p>\n<ol>\n<li>基于Wordpress等一站式解决方案(小白首选)</li>\n<li>基于静态页面+博客框架(如github pages + hexo)</li>\n<li>全面的前后端知识亲手搭建</li>\n</ol>\n<p>本文属于第二种情况，如果你选择这种方式那么你需要开始折腾了。知道这一点后我还要告诉你的是下面的内容，关于我刚搭建完博客后的见解。</p>\n<p>我把整个过程大致分成两个阶段。第一步先利用hexo搭建一个本地个人博客，第二步利用github让别人也看到你的博客。</p>\n<p>关于第一步:</p>\n<p>hexo是一个优秀的博客框架(不局限于此)，你只需要在电脑上某处新建一个文件夹，便可以利用hexo帮你搭建属于你的个人博客，当然完事以后这个博客只是躺在你的电脑上而已。除了hexo以外还有别的框架可以供选择，这些框架你可以在我提供的文章链接或别处了解到。另外有趣的是hexo的官网上有这么一段主题叫做 <em><a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\">迁移</a></em> 的内容，将告诉你怎么将自己在别处的博客全部转移到hexo框架下。</p>\n<p>关于第二步:</p>\n<p>如果你已经注册了github帐号，那么恭喜你!关于什么是github pages你可以先了解一下，也可以在文末的引用中找到我看过的一篇。简单的说就是要在github上新建一个仓库，仓库的名字很特别，然后在你的本地博客的配置文件中写上这个仓库的地址，最后只需要敲 <code>hexo deploy</code> 就可以将博客发布，让别人看到你的博客。事实上就是git帮你自动同步到你新建的仓库，浏览器输入仓库名就可以访问了。当然，这听起来非常的掉价，那么你可以给这个仓库改头换面，弄一个个性化域名。反正我觉得这无所谓，不过别着急后面会告诉你的。</p>\n<blockquote>\n<blockquote>\n<p>重要:除了github平台，还有其他平台可供选择，比如国内的码云。需要注意的是，在访问速度方面，国内的肯定是要比国外快的。</p>\n</blockquote>\n</blockquote>\n<p>小结:如果你已经大概清楚这两步你要干什么了，相信我，完全可以跳过准备工作。事实上准备工作的部分被我删掉了，因为我觉得没必要单独说明。</p>\n<blockquote>\n<h2 id=\"Hexo搭建博客-第一步\"><a href=\"#Hexo搭建博客-第一步\" class=\"headerlink\" title=\"Hexo搭建博客(第一步)\"></a>Hexo搭建博客(第一步)</h2></blockquote>\n<p>如果第一次使用hexo，那么最好的方式当然是从 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">官网的Getting Started</a> 开始入手。hexo官网支持很多语种，你可以切换到中文。到这里，你一定发现了除了文字教程以外，还有来自b站的视频可供你学习。无论通过何种方式下面你都可以开始搭建博客了，下面我按官网 <strong>开始使用</strong> 中的目录结构来说一下我的经验。</p>\n<ul>\n<li><p>概述 </p>\n<p>  这里会告诉你使用hexo前你应该安装好Git和Node.js，当然没有也没关系，因为它会告诉你怎么做。Node.js是hexo需要依赖的环境，而Git在建站的时候你就会知道他有什么用了。Git和Node。js的安装可以安装win系统熟悉的方式下载安装包安装，而Hexo可以通过git bash中输入命令的方式安装。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>  全都安装完了以后，建议在cmd或者git bash中查看一下版本，这么做主要是为了确认这些都正确安装了。</p>\n<p>  <img src=\"/2018/12/09/hello-world/version.png\" alt=\"它们的安装版本\"></p>\n</li>\n<li><p>建站</p>\n<p>  官方一上来就给了三条命令:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>  第一条命令中 &lt; folder &gt; 需要替换成一个文件夹名字，即使这个文件夹不存在也没有关系会主动创建。如果不写，则被hexo认为指代当前文件夹。然后hexo会初始化这个文件夹，在文件夹中生成对应的结构。其实你观察输出语句就会发现，初始化就是利用Git去克隆了一个远程仓库(默认主题的博客站)。其中会夹杂一下WARN但是没有关系，最后是一句INFO  Start blogging with Hexo!到这里你的博客其实就诞生了，后续你只用装修而已。后两条命令就是进入这个文件夹并安装一些东西。</p>\n<p>  所以你会发现，如果你是随手在某处打开git bash的话，你的博客就随便安了家。但是没有关系，你可以 ctrl+x 给它找个好地方，记得重新打开git bash。</p>\n</li>\n<li><p>配置</p>\n<p>  这个文件_config.yml中可以进行很多配置，也就是相当于你的装修清单(主题也包含一个这样的文件用于主题配置)，以后你会花费一些时间在这些地方。值得注意的是yml文件的书写格式。</p>\n</li>\n<li><p>命令</p>\n<p>  这里官方介绍了一部分主要命令。你会好奇，自己用了三条命令就搭好了博客，难道只能在文件夹里看到它么，甚至不知道它长什么样子，那么再敲两条命令你就可以看到它了。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate  //生产静态文件</span><br><span class=\"line\">hexo server    //启动服务</span><br></pre></td></tr></table></figure>\n<p>  然后你就可以打开浏览器输入他给你的地址了<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a><br>  然后便是你第一次看到你的博客，默认使用的主题是landscape，虽然有点丑但也是很开心的。有时候会遇到4000端口被占用而启动失败，那么只需要换个没占用的端口就好了，拿5000举个例子</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server -p 5000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"让大家看到我的博客-第二步\"><a href=\"#让大家看到我的博客-第二步\" class=\"headerlink\" title=\"让大家看到我的博客(第二步)\"></a>让大家看到我的博客(第二步)</h2></blockquote>\n<p>如果你没有注册过github帐号和使用过仓库的话，那么需要注册一个帐号，然后配置SSH KEY，又到了自己动手(百度)，丰衣足食的时候了。</p>\n<p>当你准备好了以后，可以在自己的github上新建一个仓库，这个仓库的名字必须是这样的格式<code>username.github.io</code>，如果你已经知道了什么是User Pages的话，想必就明白了。不知道也没有关系，只要确保username是你github帐号的用户名就好了。提示:新建完仓库在cmd或git bash中输入ping username.github.io是可以ping通的。</p>\n<ol>\n<li><p>修改_config.yml</p>\n<p> 打开配置文件，找到deploy，然后把它修改正确。</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span> <span class=\"string\">git@github.com:username/username.github.io.git</span>        <span class=\"string\">//换成你自己的仓库</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p> 将repo换成你自己的仓库地址后，保存。</p>\n</li>\n<li><p>发布</p>\n<p> 在git bash中输入最后一条命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy     //发布到指定的仓库</span><br></pre></td></tr></table></figure>\n<p> 如果之前使用<code>hexo server</code>命令启动服务还没有停止，记得先 <code>ctrl + c</code>停止服务。然后再输入上面的命令，那么这个仓库的GitHub Pages设置会自动设置好，别的文章都是手动去设置，这里提出来，并不是为了有所对比，而是当一切都不顺利的时候，希望你有思路去解决。事实上，发布就是利用Git将静态页面以及样式等同步到github仓库。</p>\n<p> 此时你在浏览器就可以直接输入<code>username.github.io</code>来访问你的博客了。</p>\n</li>\n</ol>\n<blockquote>\n<h2 id=\"两点补充\"><a href=\"#两点补充\" class=\"headerlink\" title=\"两点补充\"></a>两点补充</h2></blockquote>\n<ul>\n<li><p>个性化域名</p>\n<p>  关于如何通过个性化域名访问自己的博客，很多文章里都有细致讲解，包括我引用的文章。你需要做的并不多，购买一个域名，进行相关设置。</p>\n</li>\n<li><p>博客主题</p>\n<p>  默认的博客主题是landscape，如果你想立刻马上换一个主题，那么我支持你!</p>\n<ol>\n<li><p>首先，你需要去Hexo官网的 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a> 模块找到一个你喜欢的主题。虽然它的排序方式是以英文字母顺序来的，没有排行榜，目前比较受欢迎的主题有NexT，也是我选用的主题。</p>\n</li>\n<li><p>其次，每一个主题都对应一个github仓库，预览主题时你一定能找到指引你去仓库的方式。拿到仓库地址后你只需要将它克隆到本地来。如果你还记得你的博客的目录结构的话，你会发现有一个themes文件夹，打开文件夹后你会看到这里面只有一个文件夹那就是landscape，在这里打开一个git bash将你喜欢的主题仓库克隆下来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:theme-next/hexo-theme-next.git       //以NexT主题为例</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后，如果想让这个主题生效，那么就需要在你的装修清单_config.yml中修改主题。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">   theme:</span> <span class=\"string\">next</span>     <span class=\"string\">//默认是landscape，直接修改即可，名称与themes文件夹下主题文件夹同名</span></span><br></pre></td></tr></table></figure>\n<p>重新发布博客。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean        //清除</span><br><span class=\"line\">$ hexo generate     //重新生成静态页面</span><br><span class=\"line\">$ hexo deploy       //发布</span><br></pre></td></tr></table></figure>\n<p>重新在浏览器访问博客，验证是否生效。</p>\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"总结在后\"><a href=\"#总结在后\" class=\"headerlink\" title=\"总结在后\"></a>总结在后</h2></blockquote>\n<p>啰嗦两句，都说越新的手子字越多，看来的确是这样。第一次写博客，感觉自己的思路很乱，想尽可能的写的细致，让小白也能看得懂，但是怎么也做不到。后来一想，小白已经被我推荐到第一种方式了，留下来的估计都是狠角色，自己倒腾倒腾也就整出来了，也就放心多了。</p>\n<p>也不知道自己的文章是什么样的风格，不过搭建一个博客主要也是为了学习，或是总结经验。没打算有人会看得见它，所以又放心了。如果很幸运文章被你看到了，那希望对你是有益的。但如果你发现我哪里写的有问题，记得一定要大声告诉我，欢迎指正。</p>\n<blockquote>\n<h2 id=\"引用-amp-感谢\"><a href=\"#引用-amp-感谢\" class=\"headerlink\" title=\"引用&amp;感谢\"></a>引用&amp;感谢</h2></blockquote>\n<p>以下无先后顺序，无主观评价，感谢前人种树</p>\n<ul>\n<li><p>整理的时候发现我好像在”抄袭并翻译”这个大佬，另外这个大佬的文末推荐的文章挺好的</p>\n<p>  <a href=\"https://blog.csdn.net/peterzhen40/article/details/78942293\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/peterzhen40/article/details/78942293</a></p>\n</li>\n<li><p>github pages的两种类型</p>\n<p>  <a href=\"https://www.cnblogs.com/liuzhi/p/8169255.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liuzhi/p/8169255.html</a></p>\n</li>\n<li><p>本文开头提及的文章</p>\n<p>  <a href=\"https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw</a></p>\n</li>\n<li><p>中途学习了一下markdown语法</p>\n<p>  <a href=\"https://www.cnblogs.com/liugang-vip/p/6337580.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liugang-vip/p/6337580.html</a></p>\n</li>\n<li><p>讲的比较细的一篇文章</p>\n<p>  <a href=\"https://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>俗话说人人都有一颗搭博客的心，直到前段时间再次看到一篇名为&lt;&lt;使用hexo+github搭建免费个人博客详细教程&gt;&gt;的文章，不由得兴奋了起来。然而兴奋却不来自于拥有一个个人博客，而是<code>hexo+github搭建</code>这个字眼。</p>","more":"<blockquote>\n<h2 id=\"闲聊在前\"><a href=\"#闲聊在前\" class=\"headerlink\" title=\"闲聊在前\"></a>闲聊在前</h2></blockquote>\n<p>读完开头提到的文章，我并没有马上开始实操，而是又去收集了很多相关的文章，这些文章对我都有帮助，他们的链接我将会在最后列出。读完这些文章理清了很多一开始的认知误区和迷糊的地方，也希望给你更好的启发。<br>如果你下定决心了，那么，我首先要告诉你的是搭建博客的途径，我觉得这很重要，能让你不受局限于本文而选择适合自己的方式。</p>\n<p>一般来说有三种方式:</p>\n<ol>\n<li>基于Wordpress等一站式解决方案(小白首选)</li>\n<li>基于静态页面+博客框架(如github pages + hexo)</li>\n<li>全面的前后端知识亲手搭建</li>\n</ol>\n<p>本文属于第二种情况，如果你选择这种方式那么你需要开始折腾了。知道这一点后我还要告诉你的是下面的内容，关于我刚搭建完博客后的见解。</p>\n<p>我把整个过程大致分成两个阶段。第一步先利用hexo搭建一个本地个人博客，第二步利用github让别人也看到你的博客。</p>\n<p>关于第一步:</p>\n<p>hexo是一个优秀的博客框架(不局限于此)，你只需要在电脑上某处新建一个文件夹，便可以利用hexo帮你搭建属于你的个人博客，当然完事以后这个博客只是躺在你的电脑上而已。除了hexo以外还有别的框架可以供选择，这些框架你可以在我提供的文章链接或别处了解到。另外有趣的是hexo的官网上有这么一段主题叫做 <em><a href=\"https://hexo.io/zh-cn/docs/migration\" target=\"_blank\" rel=\"noopener\">迁移</a></em> 的内容，将告诉你怎么将自己在别处的博客全部转移到hexo框架下。</p>\n<p>关于第二步:</p>\n<p>如果你已经注册了github帐号，那么恭喜你!关于什么是github pages你可以先了解一下，也可以在文末的引用中找到我看过的一篇。简单的说就是要在github上新建一个仓库，仓库的名字很特别，然后在你的本地博客的配置文件中写上这个仓库的地址，最后只需要敲 <code>hexo deploy</code> 就可以将博客发布，让别人看到你的博客。事实上就是git帮你自动同步到你新建的仓库，浏览器输入仓库名就可以访问了。当然，这听起来非常的掉价，那么你可以给这个仓库改头换面，弄一个个性化域名。反正我觉得这无所谓，不过别着急后面会告诉你的。</p>\n<blockquote>\n<blockquote>\n<p>重要:除了github平台，还有其他平台可供选择，比如国内的码云。需要注意的是，在访问速度方面，国内的肯定是要比国外快的。</p>\n</blockquote>\n</blockquote>\n<p>小结:如果你已经大概清楚这两步你要干什么了，相信我，完全可以跳过准备工作。事实上准备工作的部分被我删掉了，因为我觉得没必要单独说明。</p>\n<blockquote>\n<h2 id=\"Hexo搭建博客-第一步\"><a href=\"#Hexo搭建博客-第一步\" class=\"headerlink\" title=\"Hexo搭建博客(第一步)\"></a>Hexo搭建博客(第一步)</h2></blockquote>\n<p>如果第一次使用hexo，那么最好的方式当然是从 <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">官网的Getting Started</a> 开始入手。hexo官网支持很多语种，你可以切换到中文。到这里，你一定发现了除了文字教程以外，还有来自b站的视频可供你学习。无论通过何种方式下面你都可以开始搭建博客了，下面我按官网 <strong>开始使用</strong> 中的目录结构来说一下我的经验。</p>\n<ul>\n<li><p>概述 </p>\n<p>  这里会告诉你使用hexo前你应该安装好Git和Node.js，当然没有也没关系，因为它会告诉你怎么做。Node.js是hexo需要依赖的环境，而Git在建站的时候你就会知道他有什么用了。Git和Node。js的安装可以安装win系统熟悉的方式下载安装包安装，而Hexo可以通过git bash中输入命令的方式安装。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>  全都安装完了以后，建议在cmd或者git bash中查看一下版本，这么做主要是为了确认这些都正确安装了。</p>\n<p>  <img src=\"/2018/12/09/hello-world/version.png\" alt=\"它们的安装版本\"></p>\n</li>\n<li><p>建站</p>\n<p>  官方一上来就给了三条命令:</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>  第一条命令中 &lt; folder &gt; 需要替换成一个文件夹名字，即使这个文件夹不存在也没有关系会主动创建。如果不写，则被hexo认为指代当前文件夹。然后hexo会初始化这个文件夹，在文件夹中生成对应的结构。其实你观察输出语句就会发现，初始化就是利用Git去克隆了一个远程仓库(默认主题的博客站)。其中会夹杂一下WARN但是没有关系，最后是一句INFO  Start blogging with Hexo!到这里你的博客其实就诞生了，后续你只用装修而已。后两条命令就是进入这个文件夹并安装一些东西。</p>\n<p>  所以你会发现，如果你是随手在某处打开git bash的话，你的博客就随便安了家。但是没有关系，你可以 ctrl+x 给它找个好地方，记得重新打开git bash。</p>\n</li>\n<li><p>配置</p>\n<p>  这个文件_config.yml中可以进行很多配置，也就是相当于你的装修清单(主题也包含一个这样的文件用于主题配置)，以后你会花费一些时间在这些地方。值得注意的是yml文件的书写格式。</p>\n</li>\n<li><p>命令</p>\n<p>  这里官方介绍了一部分主要命令。你会好奇，自己用了三条命令就搭好了博客，难道只能在文件夹里看到它么，甚至不知道它长什么样子，那么再敲两条命令你就可以看到它了。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate  //生产静态文件</span><br><span class=\"line\">hexo server    //启动服务</span><br></pre></td></tr></table></figure>\n<p>  然后你就可以打开浏览器输入他给你的地址了<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a><br>  然后便是你第一次看到你的博客，默认使用的主题是landscape，虽然有点丑但也是很开心的。有时候会遇到4000端口被占用而启动失败，那么只需要换个没占用的端口就好了，拿5000举个例子</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server -p 5000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"让大家看到我的博客-第二步\"><a href=\"#让大家看到我的博客-第二步\" class=\"headerlink\" title=\"让大家看到我的博客(第二步)\"></a>让大家看到我的博客(第二步)</h2></blockquote>\n<p>如果你没有注册过github帐号和使用过仓库的话，那么需要注册一个帐号，然后配置SSH KEY，又到了自己动手(百度)，丰衣足食的时候了。</p>\n<p>当你准备好了以后，可以在自己的github上新建一个仓库，这个仓库的名字必须是这样的格式<code>username.github.io</code>，如果你已经知道了什么是User Pages的话，想必就明白了。不知道也没有关系，只要确保username是你github帐号的用户名就好了。提示:新建完仓库在cmd或git bash中输入ping username.github.io是可以ping通的。</p>\n<ol>\n<li><p>修改_config.yml</p>\n<p> 打开配置文件，找到deploy，然后把它修改正确。</p>\n <figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\">    type:</span> <span class=\"string\">git</span></span><br><span class=\"line\"><span class=\"attr\">    repo:</span> <span class=\"string\">git@github.com:username/username.github.io.git</span>        <span class=\"string\">//换成你自己的仓库</span></span><br><span class=\"line\"><span class=\"attr\">    branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<p> 将repo换成你自己的仓库地址后，保存。</p>\n</li>\n<li><p>发布</p>\n<p> 在git bash中输入最后一条命令</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy     //发布到指定的仓库</span><br></pre></td></tr></table></figure>\n<p> 如果之前使用<code>hexo server</code>命令启动服务还没有停止，记得先 <code>ctrl + c</code>停止服务。然后再输入上面的命令，那么这个仓库的GitHub Pages设置会自动设置好，别的文章都是手动去设置，这里提出来，并不是为了有所对比，而是当一切都不顺利的时候，希望你有思路去解决。事实上，发布就是利用Git将静态页面以及样式等同步到github仓库。</p>\n<p> 此时你在浏览器就可以直接输入<code>username.github.io</code>来访问你的博客了。</p>\n</li>\n</ol>\n<blockquote>\n<h2 id=\"两点补充\"><a href=\"#两点补充\" class=\"headerlink\" title=\"两点补充\"></a>两点补充</h2></blockquote>\n<ul>\n<li><p>个性化域名</p>\n<p>  关于如何通过个性化域名访问自己的博客，很多文章里都有细致讲解，包括我引用的文章。你需要做的并不多，购买一个域名，进行相关设置。</p>\n</li>\n<li><p>博客主题</p>\n<p>  默认的博客主题是landscape，如果你想立刻马上换一个主题，那么我支持你!</p>\n<ol>\n<li><p>首先，你需要去Hexo官网的 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Themes</a> 模块找到一个你喜欢的主题。虽然它的排序方式是以英文字母顺序来的，没有排行榜，目前比较受欢迎的主题有NexT，也是我选用的主题。</p>\n</li>\n<li><p>其次，每一个主题都对应一个github仓库，预览主题时你一定能找到指引你去仓库的方式。拿到仓库地址后你只需要将它克隆到本地来。如果你还记得你的博客的目录结构的话，你会发现有一个themes文件夹，打开文件夹后你会看到这里面只有一个文件夹那就是landscape，在这里打开一个git bash将你喜欢的主题仓库克隆下来。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:theme-next/hexo-theme-next.git       //以NexT主题为例</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后，如果想让这个主题生效，那么就需要在你的装修清单_config.yml中修改主题。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Extensions</span></span><br><span class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></span><br><span class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></span><br><span class=\"line\"><span class=\"attr\">   theme:</span> <span class=\"string\">next</span>     <span class=\"string\">//默认是landscape，直接修改即可，名称与themes文件夹下主题文件夹同名</span></span><br></pre></td></tr></table></figure>\n<p>重新发布博客。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean        //清除</span><br><span class=\"line\">$ hexo generate     //重新生成静态页面</span><br><span class=\"line\">$ hexo deploy       //发布</span><br></pre></td></tr></table></figure>\n<p>重新在浏览器访问博客，验证是否生效。</p>\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"总结在后\"><a href=\"#总结在后\" class=\"headerlink\" title=\"总结在后\"></a>总结在后</h2></blockquote>\n<p>啰嗦两句，都说越新的手子字越多，看来的确是这样。第一次写博客，感觉自己的思路很乱，想尽可能的写的细致，让小白也能看得懂，但是怎么也做不到。后来一想，小白已经被我推荐到第一种方式了，留下来的估计都是狠角色，自己倒腾倒腾也就整出来了，也就放心多了。</p>\n<p>也不知道自己的文章是什么样的风格，不过搭建一个博客主要也是为了学习，或是总结经验。没打算有人会看得见它，所以又放心了。如果很幸运文章被你看到了，那希望对你是有益的。但如果你发现我哪里写的有问题，记得一定要大声告诉我，欢迎指正。</p>\n<blockquote>\n<h2 id=\"引用-amp-感谢\"><a href=\"#引用-amp-感谢\" class=\"headerlink\" title=\"引用&amp;感谢\"></a>引用&amp;感谢</h2></blockquote>\n<p>以下无先后顺序，无主观评价，感谢前人种树</p>\n<ul>\n<li><p>整理的时候发现我好像在”抄袭并翻译”这个大佬，另外这个大佬的文末推荐的文章挺好的</p>\n<p>  <a href=\"https://blog.csdn.net/peterzhen40/article/details/78942293\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/peterzhen40/article/details/78942293</a></p>\n</li>\n<li><p>github pages的两种类型</p>\n<p>  <a href=\"https://www.cnblogs.com/liuzhi/p/8169255.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liuzhi/p/8169255.html</a></p>\n</li>\n<li><p>本文开头提及的文章</p>\n<p>  <a href=\"https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/qfytH4TsM0bDEt99X-Ztbw</a></p>\n</li>\n<li><p>中途学习了一下markdown语法</p>\n<p>  <a href=\"https://www.cnblogs.com/liugang-vip/p/6337580.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liugang-vip/p/6337580.html</a></p>\n</li>\n<li><p>讲的比较细的一篇文章</p>\n<p>  <a href=\"https://blog.csdn.net/gdutxiaoxu/article/details/53576018\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p>\n</li>\n</ul>"},{"title":"初探ELK日志管理体系","date":"2019-01-10T07:56:17.000Z","comments":1,"_content":"> ## ELK介绍\n\n[ElasticSearch]:https://www.elastic.co/products/elasticsearch\n[Beats]:https://www.elastic.co/cn/products/beats\n[Logstash]:https://www.elastic.co/cn/products/logstash\n[Kibana]:https://www.elastic.co/cn/products/kibana\nELK是elastic公司提供的一套完整的日志收集和展示的解决方案，分别指代的是[ElasticSearch]、[Logstash]和[Kibana]三个产品，另外加入了[Beats]来优化Logstash（这一点此处先忽略不计）。主要用于大型`分布式`系统的日志集中分析。\n<!-- more -->\n\n一个完整的集中式日志系统，需要包含以下几个主要特点：\n\n* 收集——能够采集多种来源的日志数据\n* 传输——能够稳定的把日志数据传输到中央系统\n* 转换——能够对收集的日志数据进行格式转换处理\n* 存储——如何存储日志数据\n* 分析——可以支持UI分析\n* 告警——能够提供错误报告，监控机制\n\n在ELK体系中L负责收集、转换和传输；E负责存储数据；K负责分析，以提供可视化界面。\n\n> ## ELK架构\n\n一个典型的架构方式如图所示。在一个分布式的项目中为每个节点都安装Logstash来收集各自的日志信息，并将这些日志信息发送到中央ElasticSearch存储，管理人员可以通过Kibana查看可视化的结果，包括以图表的形式展示。\n\n![ELK普通架构](初探ELK日志管理体系/ELK架构1-副本.jpg)\n\n> ## 快速搭建\n\n首先要了解ELK中的三个组件各自的入门使用，这一点可以参考官网的文档资料。在官网的文档中同时提供了用于操作的模拟数据，非常的贴心。另外允许的话也可以在自己本地电脑找一份tomcat的运行日志，用做模拟数据。\n \n1. ElasticSearch\n2. Logstash\n3. Kibana","source":"_posts/初探ELK日志管理体系.md","raw":"---\ntitle: 初探ELK日志管理体系\ndate: 2019-01-10 15:56:17\ntags: [ElasticSearch,Logstash,Kibana]\ncategories: 学到了\ncomments: true\n---\n> ## ELK介绍\n\n[ElasticSearch]:https://www.elastic.co/products/elasticsearch\n[Beats]:https://www.elastic.co/cn/products/beats\n[Logstash]:https://www.elastic.co/cn/products/logstash\n[Kibana]:https://www.elastic.co/cn/products/kibana\nELK是elastic公司提供的一套完整的日志收集和展示的解决方案，分别指代的是[ElasticSearch]、[Logstash]和[Kibana]三个产品，另外加入了[Beats]来优化Logstash（这一点此处先忽略不计）。主要用于大型`分布式`系统的日志集中分析。\n<!-- more -->\n\n一个完整的集中式日志系统，需要包含以下几个主要特点：\n\n* 收集——能够采集多种来源的日志数据\n* 传输——能够稳定的把日志数据传输到中央系统\n* 转换——能够对收集的日志数据进行格式转换处理\n* 存储——如何存储日志数据\n* 分析——可以支持UI分析\n* 告警——能够提供错误报告，监控机制\n\n在ELK体系中L负责收集、转换和传输；E负责存储数据；K负责分析，以提供可视化界面。\n\n> ## ELK架构\n\n一个典型的架构方式如图所示。在一个分布式的项目中为每个节点都安装Logstash来收集各自的日志信息，并将这些日志信息发送到中央ElasticSearch存储，管理人员可以通过Kibana查看可视化的结果，包括以图表的形式展示。\n\n![ELK普通架构](初探ELK日志管理体系/ELK架构1-副本.jpg)\n\n> ## 快速搭建\n\n首先要了解ELK中的三个组件各自的入门使用，这一点可以参考官网的文档资料。在官网的文档中同时提供了用于操作的模拟数据，非常的贴心。另外允许的话也可以在自己本地电脑找一份tomcat的运行日志，用做模拟数据。\n \n1. ElasticSearch\n2. Logstash\n3. Kibana","slug":"初探ELK日志管理体系","published":1,"updated":"2019-06-04T06:35:39.774Z","layout":"post","photos":[],"link":"","_id":"cjwing2o40007ebdkasxcxzyd","content":"<blockquote>\n<h2 id=\"ELK介绍\"><a href=\"#ELK介绍\" class=\"headerlink\" title=\"ELK介绍\"></a>ELK介绍</h2></blockquote>\n<p>ELK是elastic公司提供的一套完整的日志收集和展示的解决方案，分别指代的是<a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">ElasticSearch</a>、<a href=\"https://www.elastic.co/cn/products/logstash\" target=\"_blank\" rel=\"noopener\">Logstash</a>和<a href=\"https://www.elastic.co/cn/products/kibana\" target=\"_blank\" rel=\"noopener\">Kibana</a>三个产品，另外加入了<a href=\"https://www.elastic.co/cn/products/beats\" target=\"_blank\" rel=\"noopener\">Beats</a>来优化Logstash（这一点此处先忽略不计）。主要用于大型<code>分布式</code>系统的日志集中分析。<br><a id=\"more\"></a></p>\n<p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p>\n<ul>\n<li>收集——能够采集多种来源的日志数据</li>\n<li>传输——能够稳定的把日志数据传输到中央系统</li>\n<li>转换——能够对收集的日志数据进行格式转换处理</li>\n<li>存储——如何存储日志数据</li>\n<li>分析——可以支持UI分析</li>\n<li>告警——能够提供错误报告，监控机制</li>\n</ul>\n<p>在ELK体系中L负责收集、转换和传输；E负责存储数据；K负责分析，以提供可视化界面。</p>\n<blockquote>\n<h2 id=\"ELK架构\"><a href=\"#ELK架构\" class=\"headerlink\" title=\"ELK架构\"></a>ELK架构</h2></blockquote>\n<p>一个典型的架构方式如图所示。在一个分布式的项目中为每个节点都安装Logstash来收集各自的日志信息，并将这些日志信息发送到中央ElasticSearch存储，管理人员可以通过Kibana查看可视化的结果，包括以图表的形式展示。</p>\n<p><img src=\"/2019/01/10/初探ELK日志管理体系/ELK架构1-副本.jpg\" alt=\"ELK普通架构\"></p>\n<blockquote>\n<h2 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h2></blockquote>\n<p>首先要了解ELK中的三个组件各自的入门使用，这一点可以参考官网的文档资料。在官网的文档中同时提供了用于操作的模拟数据，非常的贴心。另外允许的话也可以在自己本地电脑找一份tomcat的运行日志，用做模拟数据。</p>\n<ol>\n<li>ElasticSearch</li>\n<li>Logstash</li>\n<li>Kibana</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h2 id=\"ELK介绍\"><a href=\"#ELK介绍\" class=\"headerlink\" title=\"ELK介绍\"></a>ELK介绍</h2></blockquote>\n<p>ELK是elastic公司提供的一套完整的日志收集和展示的解决方案，分别指代的是<a href=\"https://www.elastic.co/products/elasticsearch\" target=\"_blank\" rel=\"noopener\">ElasticSearch</a>、<a href=\"https://www.elastic.co/cn/products/logstash\" target=\"_blank\" rel=\"noopener\">Logstash</a>和<a href=\"https://www.elastic.co/cn/products/kibana\" target=\"_blank\" rel=\"noopener\">Kibana</a>三个产品，另外加入了<a href=\"https://www.elastic.co/cn/products/beats\" target=\"_blank\" rel=\"noopener\">Beats</a>来优化Logstash（这一点此处先忽略不计）。主要用于大型<code>分布式</code>系统的日志集中分析。<br></p>","more":"<p></p>\n<p>一个完整的集中式日志系统，需要包含以下几个主要特点：</p>\n<ul>\n<li>收集——能够采集多种来源的日志数据</li>\n<li>传输——能够稳定的把日志数据传输到中央系统</li>\n<li>转换——能够对收集的日志数据进行格式转换处理</li>\n<li>存储——如何存储日志数据</li>\n<li>分析——可以支持UI分析</li>\n<li>告警——能够提供错误报告，监控机制</li>\n</ul>\n<p>在ELK体系中L负责收集、转换和传输；E负责存储数据；K负责分析，以提供可视化界面。</p>\n<blockquote>\n<h2 id=\"ELK架构\"><a href=\"#ELK架构\" class=\"headerlink\" title=\"ELK架构\"></a>ELK架构</h2></blockquote>\n<p>一个典型的架构方式如图所示。在一个分布式的项目中为每个节点都安装Logstash来收集各自的日志信息，并将这些日志信息发送到中央ElasticSearch存储，管理人员可以通过Kibana查看可视化的结果，包括以图表的形式展示。</p>\n<p><img src=\"/2019/01/10/初探ELK日志管理体系/ELK架构1-副本.jpg\" alt=\"ELK普通架构\"></p>\n<blockquote>\n<h2 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h2></blockquote>\n<p>首先要了解ELK中的三个组件各自的入门使用，这一点可以参考官网的文档资料。在官网的文档中同时提供了用于操作的模拟数据，非常的贴心。另外允许的话也可以在自己本地电脑找一份tomcat的运行日志，用做模拟数据。</p>\n<ol>\n<li>ElasticSearch</li>\n<li>Logstash</li>\n<li>Kibana</li>\n</ol>"},{"title":"集群Session共享","date":"2018-12-17T06:52:11.000Z","comments":1,"_content":"## 前情提要\n\n对于一个web应用，我们常常把用户的简单信息存入session来跟踪同一个用户，以方便后续进行的操作。\n\n1. 用户通过浏览器请求服务器（tomcat）\n2. 服务器为本次会话创建session对象，并将JsessionID通过Cookie回写给浏览器\n<!-- more -->\n3. 浏览器将cookie存储在本地\n4. 用户后续访问服务器，浏览器将cookie信息放入请求中\n5. 服务器解析cookie获得JsessionID，保证会话一致性\n\n### Session的生命周期\n\n* session由tomcat容器创建并管理\n* session被存储在tomcat的本地缓存中，使用ConcurrentHashMap维护\n* session的ID作为map的key，session对象本身作为map的value\n* session销毁：\n    1.session自动过期\n    2.通过代码手动销毁Session.invalidate()\n    3.tomcat非正常关闭，丢失session\n\n## 问题背景\n\n应用的用户访问量剧增，单一服务器无法承受高并发情况。解决方案之一就是增加服务器数量，搭建tomcat集群，并使用nginx进行反向代理，通过负载均衡相关策略削弱并发量。\n\n问题：用户A首次请求时，由服务器a处理了请求，并创建了session会话，后续用户的请求被分发到了服务器b、服务器c...服务器n，能保证会话唯一性吗？\n\n答案：显然是不能的！因为每台服务器在处理用户A的请求时都会为其创建session对象，而这些session并不是同一个，所以造成了session丢失。\n\n> 那么如何保证创建的session被所有服务器共享呢？？？\n\n## 集群Session共享解决方案\n\n* 方式一：服务器间同步session，让所有服务器都拥有全部session。\n\n* 方式二：使用nginx的负载均衡策略之一ip_hash。因为正常的用户不会疯狂更换IP。\n\n* 方式三：进行统一缓存，所有服务器从缓存中取。缓存途径有很多，比如使用redis进行缓存。\n\n### 打开方式和优缺点:\n\n> 方式一：\n    \n    打开方式：\n        1.修改tomcat配置文件server.xml中的Cluster节点；\n        2.修改应用web.xml,增加<distributable/>节点\n\n优点：\n\n1. 对应用无倾略性\n2. 适应各种负载均衡策略\n3. 服务器重启或宕机不会丢失session\n4. 安全性高\n\n缺点：\n\n1. session同步存在延迟\n2. 占用宽带资源，序列化反序列化耗费CPU资源\n\n> 方式二：\n    \n    打开方式：修改nginx.conf文件，使用ip_hash策略。\n\n优点：\n\n1. 配置简单，对应用没有侵入性\n2. 水平扩展方便\n3. 安全性高\n\n缺点：\n\n1. 重启服务器会丢失session\n2. 水平扩展过程中丢失部分session\n\n> 方式三：\n    \n    打开方式：\n        1.增加对应的依赖jar包；\n        2.修改web.xml增加filter；\n        3.修改spring配置文件，注入spring session和redis相关的bean。\n\n优点：\n\n1. 适应各种负载均衡策略\n2. 服务器重启或宕机不会丢失session，安全性高\n3. 适合大型集群，扩展能力强\n\n缺点：\n\n1. 对应用具有侵入性，需要增加配置\n2. 增加了网络开销\n3. 序列化和反序列化消耗CPU资源","source":"_posts/集群Session共享.md","raw":"---\ntitle: 集群Session共享\ndate: 2018-12-17 14:52:11\ntags: Session\ncategories: 学到了\ncomments: true\n---\n## 前情提要\n\n对于一个web应用，我们常常把用户的简单信息存入session来跟踪同一个用户，以方便后续进行的操作。\n\n1. 用户通过浏览器请求服务器（tomcat）\n2. 服务器为本次会话创建session对象，并将JsessionID通过Cookie回写给浏览器\n<!-- more -->\n3. 浏览器将cookie存储在本地\n4. 用户后续访问服务器，浏览器将cookie信息放入请求中\n5. 服务器解析cookie获得JsessionID，保证会话一致性\n\n### Session的生命周期\n\n* session由tomcat容器创建并管理\n* session被存储在tomcat的本地缓存中，使用ConcurrentHashMap维护\n* session的ID作为map的key，session对象本身作为map的value\n* session销毁：\n    1.session自动过期\n    2.通过代码手动销毁Session.invalidate()\n    3.tomcat非正常关闭，丢失session\n\n## 问题背景\n\n应用的用户访问量剧增，单一服务器无法承受高并发情况。解决方案之一就是增加服务器数量，搭建tomcat集群，并使用nginx进行反向代理，通过负载均衡相关策略削弱并发量。\n\n问题：用户A首次请求时，由服务器a处理了请求，并创建了session会话，后续用户的请求被分发到了服务器b、服务器c...服务器n，能保证会话唯一性吗？\n\n答案：显然是不能的！因为每台服务器在处理用户A的请求时都会为其创建session对象，而这些session并不是同一个，所以造成了session丢失。\n\n> 那么如何保证创建的session被所有服务器共享呢？？？\n\n## 集群Session共享解决方案\n\n* 方式一：服务器间同步session，让所有服务器都拥有全部session。\n\n* 方式二：使用nginx的负载均衡策略之一ip_hash。因为正常的用户不会疯狂更换IP。\n\n* 方式三：进行统一缓存，所有服务器从缓存中取。缓存途径有很多，比如使用redis进行缓存。\n\n### 打开方式和优缺点:\n\n> 方式一：\n    \n    打开方式：\n        1.修改tomcat配置文件server.xml中的Cluster节点；\n        2.修改应用web.xml,增加<distributable/>节点\n\n优点：\n\n1. 对应用无倾略性\n2. 适应各种负载均衡策略\n3. 服务器重启或宕机不会丢失session\n4. 安全性高\n\n缺点：\n\n1. session同步存在延迟\n2. 占用宽带资源，序列化反序列化耗费CPU资源\n\n> 方式二：\n    \n    打开方式：修改nginx.conf文件，使用ip_hash策略。\n\n优点：\n\n1. 配置简单，对应用没有侵入性\n2. 水平扩展方便\n3. 安全性高\n\n缺点：\n\n1. 重启服务器会丢失session\n2. 水平扩展过程中丢失部分session\n\n> 方式三：\n    \n    打开方式：\n        1.增加对应的依赖jar包；\n        2.修改web.xml增加filter；\n        3.修改spring配置文件，注入spring session和redis相关的bean。\n\n优点：\n\n1. 适应各种负载均衡策略\n2. 服务器重启或宕机不会丢失session，安全性高\n3. 适合大型集群，扩展能力强\n\n缺点：\n\n1. 对应用具有侵入性，需要增加配置\n2. 增加了网络开销\n3. 序列化和反序列化消耗CPU资源","slug":"集群Session共享","published":1,"updated":"2019-06-04T06:35:53.688Z","layout":"post","photos":[],"link":"","_id":"cjwing2o70008ebdkwccvnisu","content":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>对于一个web应用，我们常常把用户的简单信息存入session来跟踪同一个用户，以方便后续进行的操作。</p>\n<ol>\n<li>用户通过浏览器请求服务器（tomcat）</li>\n<li>服务器为本次会话创建session对象，并将JsessionID通过Cookie回写给浏览器<a id=\"more\"></a></li>\n<li>浏览器将cookie存储在本地</li>\n<li>用户后续访问服务器，浏览器将cookie信息放入请求中</li>\n<li>服务器解析cookie获得JsessionID，保证会话一致性</li>\n</ol>\n<h3 id=\"Session的生命周期\"><a href=\"#Session的生命周期\" class=\"headerlink\" title=\"Session的生命周期\"></a>Session的生命周期</h3><ul>\n<li>session由tomcat容器创建并管理</li>\n<li>session被存储在tomcat的本地缓存中，使用ConcurrentHashMap维护</li>\n<li>session的ID作为map的key，session对象本身作为map的value</li>\n<li>session销毁：<br>  1.session自动过期<br>  2.通过代码手动销毁Session.invalidate()<br>  3.tomcat非正常关闭，丢失session</li>\n</ul>\n<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>应用的用户访问量剧增，单一服务器无法承受高并发情况。解决方案之一就是增加服务器数量，搭建tomcat集群，并使用nginx进行反向代理，通过负载均衡相关策略削弱并发量。</p>\n<p>问题：用户A首次请求时，由服务器a处理了请求，并创建了session会话，后续用户的请求被分发到了服务器b、服务器c…服务器n，能保证会话唯一性吗？</p>\n<p>答案：显然是不能的！因为每台服务器在处理用户A的请求时都会为其创建session对象，而这些session并不是同一个，所以造成了session丢失。</p>\n<blockquote>\n<p>那么如何保证创建的session被所有服务器共享呢？？？</p>\n</blockquote>\n<h2 id=\"集群Session共享解决方案\"><a href=\"#集群Session共享解决方案\" class=\"headerlink\" title=\"集群Session共享解决方案\"></a>集群Session共享解决方案</h2><ul>\n<li><p>方式一：服务器间同步session，让所有服务器都拥有全部session。</p>\n</li>\n<li><p>方式二：使用nginx的负载均衡策略之一ip_hash。因为正常的用户不会疯狂更换IP。</p>\n</li>\n<li><p>方式三：进行统一缓存，所有服务器从缓存中取。缓存途径有很多，比如使用redis进行缓存。</p>\n</li>\n</ul>\n<h3 id=\"打开方式和优缺点\"><a href=\"#打开方式和优缺点\" class=\"headerlink\" title=\"打开方式和优缺点:\"></a>打开方式和优缺点:</h3><blockquote>\n<p>方式一：</p>\n</blockquote>\n<pre><code>打开方式：\n    1.修改tomcat配置文件server.xml中的Cluster节点；\n    2.修改应用web.xml,增加&lt;distributable/&gt;节点\n</code></pre><p>优点：</p>\n<ol>\n<li>对应用无倾略性</li>\n<li>适应各种负载均衡策略</li>\n<li>服务器重启或宕机不会丢失session</li>\n<li>安全性高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>session同步存在延迟</li>\n<li>占用宽带资源，序列化反序列化耗费CPU资源</li>\n</ol>\n<blockquote>\n<p>方式二：</p>\n</blockquote>\n<pre><code>打开方式：修改nginx.conf文件，使用ip_hash策略。\n</code></pre><p>优点：</p>\n<ol>\n<li>配置简单，对应用没有侵入性</li>\n<li>水平扩展方便</li>\n<li>安全性高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>重启服务器会丢失session</li>\n<li>水平扩展过程中丢失部分session</li>\n</ol>\n<blockquote>\n<p>方式三：</p>\n</blockquote>\n<pre><code>打开方式：\n    1.增加对应的依赖jar包；\n    2.修改web.xml增加filter；\n    3.修改spring配置文件，注入spring session和redis相关的bean。\n</code></pre><p>优点：</p>\n<ol>\n<li>适应各种负载均衡策略</li>\n<li>服务器重启或宕机不会丢失session，安全性高</li>\n<li>适合大型集群，扩展能力强</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>对应用具有侵入性，需要增加配置</li>\n<li>增加了网络开销</li>\n<li>序列化和反序列化消耗CPU资源</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>对于一个web应用，我们常常把用户的简单信息存入session来跟踪同一个用户，以方便后续进行的操作。</p>\n<ol>\n<li>用户通过浏览器请求服务器（tomcat）</li>\n<li>服务器为本次会话创建session对象，并将JsessionID通过Cookie回写给浏览器</li></ol>","more":"\n<li>浏览器将cookie存储在本地</li>\n<li>用户后续访问服务器，浏览器将cookie信息放入请求中</li>\n<li>服务器解析cookie获得JsessionID，保证会话一致性</li>\n\n<h3 id=\"Session的生命周期\"><a href=\"#Session的生命周期\" class=\"headerlink\" title=\"Session的生命周期\"></a>Session的生命周期</h3><ul>\n<li>session由tomcat容器创建并管理</li>\n<li>session被存储在tomcat的本地缓存中，使用ConcurrentHashMap维护</li>\n<li>session的ID作为map的key，session对象本身作为map的value</li>\n<li>session销毁：<br>  1.session自动过期<br>  2.通过代码手动销毁Session.invalidate()<br>  3.tomcat非正常关闭，丢失session</li>\n</ul>\n<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>应用的用户访问量剧增，单一服务器无法承受高并发情况。解决方案之一就是增加服务器数量，搭建tomcat集群，并使用nginx进行反向代理，通过负载均衡相关策略削弱并发量。</p>\n<p>问题：用户A首次请求时，由服务器a处理了请求，并创建了session会话，后续用户的请求被分发到了服务器b、服务器c…服务器n，能保证会话唯一性吗？</p>\n<p>答案：显然是不能的！因为每台服务器在处理用户A的请求时都会为其创建session对象，而这些session并不是同一个，所以造成了session丢失。</p>\n<blockquote>\n<p>那么如何保证创建的session被所有服务器共享呢？？？</p>\n</blockquote>\n<h2 id=\"集群Session共享解决方案\"><a href=\"#集群Session共享解决方案\" class=\"headerlink\" title=\"集群Session共享解决方案\"></a>集群Session共享解决方案</h2><ul>\n<li><p>方式一：服务器间同步session，让所有服务器都拥有全部session。</p>\n</li>\n<li><p>方式二：使用nginx的负载均衡策略之一ip_hash。因为正常的用户不会疯狂更换IP。</p>\n</li>\n<li><p>方式三：进行统一缓存，所有服务器从缓存中取。缓存途径有很多，比如使用redis进行缓存。</p>\n</li>\n</ul>\n<h3 id=\"打开方式和优缺点\"><a href=\"#打开方式和优缺点\" class=\"headerlink\" title=\"打开方式和优缺点:\"></a>打开方式和优缺点:</h3><blockquote>\n<p>方式一：</p>\n</blockquote>\n<pre><code>打开方式：\n    1.修改tomcat配置文件server.xml中的Cluster节点；\n    2.修改应用web.xml,增加&lt;distributable/&gt;节点\n</code></pre><p>优点：</p>\n<ol>\n<li>对应用无倾略性</li>\n<li>适应各种负载均衡策略</li>\n<li>服务器重启或宕机不会丢失session</li>\n<li>安全性高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>session同步存在延迟</li>\n<li>占用宽带资源，序列化反序列化耗费CPU资源</li>\n</ol>\n<blockquote>\n<p>方式二：</p>\n</blockquote>\n<pre><code>打开方式：修改nginx.conf文件，使用ip_hash策略。\n</code></pre><p>优点：</p>\n<ol>\n<li>配置简单，对应用没有侵入性</li>\n<li>水平扩展方便</li>\n<li>安全性高</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>重启服务器会丢失session</li>\n<li>水平扩展过程中丢失部分session</li>\n</ol>\n<blockquote>\n<p>方式三：</p>\n</blockquote>\n<pre><code>打开方式：\n    1.增加对应的依赖jar包；\n    2.修改web.xml增加filter；\n    3.修改spring配置文件，注入spring session和redis相关的bean。\n</code></pre><p>优点：</p>\n<ol>\n<li>适应各种负载均衡策略</li>\n<li>服务器重启或宕机不会丢失session，安全性高</li>\n<li>适合大型集群，扩展能力强</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>对应用具有侵入性，需要增加配置</li>\n<li>增加了网络开销</li>\n<li>序列化和反序列化消耗CPU资源</li>\n</ol>"},{"title":"在服务器上安装Docker","date":"2019-04-20T01:33:03.000Z","comments":1,"_content":"\n> ## 故事背景\n\n老大丢了一台服务器给我，并留下了一句话：今天把Docker给我装上！否则别下班了。\n\n<!-- more -->\n\n> ## 怎么办？\n\n* 桌面版\n\ndocker提供了Mac和Windows的桌面版，我个人把他理解成一个应用，安装即可使用。需要注意的是Docker Desktop for Windows有一些系统限制，可以参考官方说明: [*docker-for-windows安装*](https://docs.docker.com/docker-for-windows/install/)。在此页面的右侧导航栏你同时可以找到Mac的安装途径。\n\n* Linux上安装\n\n在Linux服务器上安装docker，同样可以参考官网的说明文档 [*linux安装*](https://docs.docker.com/install/linux/docker-ce/centos/)。在此文档中提供了诸如CentOS，Debian，Ubuntu等主流发行版的安装方法，官方虽然分开讲述但流程大同小异。\n就安装的方式而言，官方介绍了三种，并说明了它们的应用场景，分别是:\n\n0. --卸载旧版本的docker\n\n1. 选择一种安装方式\n\n    1. 1 使用仓库镜像安装（好我就选这种方式了）\n    - 更新包管理工具，并安装相关工具包;\n    - 添加提供docker镜像的仓库源;\n    - 安装docker;\n    - 启动docker;\n    - 使用docker拉取并运行hello-world镜像，通过此demo入门docker。\n\n    1. 2 下载压缩包手动安装（全都是手动的，太麻烦了）\n    - 通过官网提供地址手动下载docker的RPM包;\n    - 使用RPM工具解压安装;\n    - 启动docker;\n    - 使用docker拉取并运行hello-world镜像，通过此demo入门docker。\n\n    1. 3 自动化脚本安装（自动化的，好厉害！可是我不会啊，而且我只装一台机器）\n    - 获取脚本;\n    - 使用脚本。\n\n2. --关于卸载的相关说明","source":"_posts/服务器上安装Docker.md","raw":"---\ntitle: 在服务器上安装Docker\ndate: 2019-04-20 09:33:03\ntags: [Docker]\ncategories: 学到了\ncomments: true\n---\n\n> ## 故事背景\n\n老大丢了一台服务器给我，并留下了一句话：今天把Docker给我装上！否则别下班了。\n\n<!-- more -->\n\n> ## 怎么办？\n\n* 桌面版\n\ndocker提供了Mac和Windows的桌面版，我个人把他理解成一个应用，安装即可使用。需要注意的是Docker Desktop for Windows有一些系统限制，可以参考官方说明: [*docker-for-windows安装*](https://docs.docker.com/docker-for-windows/install/)。在此页面的右侧导航栏你同时可以找到Mac的安装途径。\n\n* Linux上安装\n\n在Linux服务器上安装docker，同样可以参考官网的说明文档 [*linux安装*](https://docs.docker.com/install/linux/docker-ce/centos/)。在此文档中提供了诸如CentOS，Debian，Ubuntu等主流发行版的安装方法，官方虽然分开讲述但流程大同小异。\n就安装的方式而言，官方介绍了三种，并说明了它们的应用场景，分别是:\n\n0. --卸载旧版本的docker\n\n1. 选择一种安装方式\n\n    1. 1 使用仓库镜像安装（好我就选这种方式了）\n    - 更新包管理工具，并安装相关工具包;\n    - 添加提供docker镜像的仓库源;\n    - 安装docker;\n    - 启动docker;\n    - 使用docker拉取并运行hello-world镜像，通过此demo入门docker。\n\n    1. 2 下载压缩包手动安装（全都是手动的，太麻烦了）\n    - 通过官网提供地址手动下载docker的RPM包;\n    - 使用RPM工具解压安装;\n    - 启动docker;\n    - 使用docker拉取并运行hello-world镜像，通过此demo入门docker。\n\n    1. 3 自动化脚本安装（自动化的，好厉害！可是我不会啊，而且我只装一台机器）\n    - 获取脚本;\n    - 使用脚本。\n\n2. --关于卸载的相关说明","slug":"服务器上安装Docker","published":1,"updated":"2019-06-04T06:37:06.069Z","layout":"post","photos":[],"link":"","_id":"cjwing2ob000cebdk52phpjwf","content":"<blockquote>\n<h2 id=\"故事背景\"><a href=\"#故事背景\" class=\"headerlink\" title=\"故事背景\"></a>故事背景</h2></blockquote>\n<p>老大丢了一台服务器给我，并留下了一句话：今天把Docker给我装上！否则别下班了。</p>\n<a id=\"more\"></a>\n<blockquote>\n<h2 id=\"怎么办？\"><a href=\"#怎么办？\" class=\"headerlink\" title=\"怎么办？\"></a>怎么办？</h2></blockquote>\n<ul>\n<li>桌面版</li>\n</ul>\n<p>docker提供了Mac和Windows的桌面版，我个人把他理解成一个应用，安装即可使用。需要注意的是Docker Desktop for Windows有一些系统限制，可以参考官方说明: <a href=\"https://docs.docker.com/docker-for-windows/install/\" target=\"_blank\" rel=\"noopener\"><em>docker-for-windows安装</em></a>。在此页面的右侧导航栏你同时可以找到Mac的安装途径。</p>\n<ul>\n<li>Linux上安装</li>\n</ul>\n<p>在Linux服务器上安装docker，同样可以参考官网的说明文档 <a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\"><em>linux安装</em></a>。在此文档中提供了诸如CentOS，Debian，Ubuntu等主流发行版的安装方法，官方虽然分开讲述但流程大同小异。<br>就安装的方式而言，官方介绍了三种，并说明了它们的应用场景，分别是:</p>\n<ol start=\"0\">\n<li><p>–卸载旧版本的docker</p>\n</li>\n<li><p>选择一种安装方式</p>\n<ol>\n<li>1 使用仓库镜像安装（好我就选这种方式了）</li>\n</ol>\n<ul>\n<li>更新包管理工具，并安装相关工具包;</li>\n<li>添加提供docker镜像的仓库源;</li>\n<li>安装docker;</li>\n<li>启动docker;</li>\n<li>使用docker拉取并运行hello-world镜像，通过此demo入门docker。</li>\n</ul>\n<ol>\n<li>2 下载压缩包手动安装（全都是手动的，太麻烦了）</li>\n</ol>\n<ul>\n<li>通过官网提供地址手动下载docker的RPM包;</li>\n<li>使用RPM工具解压安装;</li>\n<li>启动docker;</li>\n<li>使用docker拉取并运行hello-world镜像，通过此demo入门docker。</li>\n</ul>\n<ol>\n<li>3 自动化脚本安装（自动化的，好厉害！可是我不会啊，而且我只装一台机器）</li>\n</ol>\n<ul>\n<li>获取脚本;</li>\n<li>使用脚本。</li>\n</ul>\n</li>\n<li><p>–关于卸载的相关说明</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h2 id=\"故事背景\"><a href=\"#故事背景\" class=\"headerlink\" title=\"故事背景\"></a>故事背景</h2></blockquote>\n<p>老大丢了一台服务器给我，并留下了一句话：今天把Docker给我装上！否则别下班了。</p>","more":"<blockquote>\n<h2 id=\"怎么办？\"><a href=\"#怎么办？\" class=\"headerlink\" title=\"怎么办？\"></a>怎么办？</h2></blockquote>\n<ul>\n<li>桌面版</li>\n</ul>\n<p>docker提供了Mac和Windows的桌面版，我个人把他理解成一个应用，安装即可使用。需要注意的是Docker Desktop for Windows有一些系统限制，可以参考官方说明: <a href=\"https://docs.docker.com/docker-for-windows/install/\" target=\"_blank\" rel=\"noopener\"><em>docker-for-windows安装</em></a>。在此页面的右侧导航栏你同时可以找到Mac的安装途径。</p>\n<ul>\n<li>Linux上安装</li>\n</ul>\n<p>在Linux服务器上安装docker，同样可以参考官网的说明文档 <a href=\"https://docs.docker.com/install/linux/docker-ce/centos/\" target=\"_blank\" rel=\"noopener\"><em>linux安装</em></a>。在此文档中提供了诸如CentOS，Debian，Ubuntu等主流发行版的安装方法，官方虽然分开讲述但流程大同小异。<br>就安装的方式而言，官方介绍了三种，并说明了它们的应用场景，分别是:</p>\n<ol start=\"0\">\n<li><p>–卸载旧版本的docker</p>\n</li>\n<li><p>选择一种安装方式</p>\n<ol>\n<li>1 使用仓库镜像安装（好我就选这种方式了）</li>\n</ol>\n<ul>\n<li>更新包管理工具，并安装相关工具包;</li>\n<li>添加提供docker镜像的仓库源;</li>\n<li>安装docker;</li>\n<li>启动docker;</li>\n<li>使用docker拉取并运行hello-world镜像，通过此demo入门docker。</li>\n</ul>\n<ol>\n<li>2 下载压缩包手动安装（全都是手动的，太麻烦了）</li>\n</ol>\n<ul>\n<li>通过官网提供地址手动下载docker的RPM包;</li>\n<li>使用RPM工具解压安装;</li>\n<li>启动docker;</li>\n<li>使用docker拉取并运行hello-world镜像，通过此demo入门docker。</li>\n</ul>\n<ol>\n<li>3 自动化脚本安装（自动化的，好厉害！可是我不会啊，而且我只装一台机器）</li>\n</ol>\n<ul>\n<li>获取脚本;</li>\n<li>使用脚本。</li>\n</ul>\n</li>\n<li><p>–关于卸载的相关说明</p>\n</li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/初探ELK日志管理体系/ELK架构2-beats.png","slug":"ELK架构2-beats.png","post":"cjwing2o40007ebdkasxcxzyd","modified":1,"renderable":0},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构3-beats.png","slug":"ELK架构3-beats.png","post":"cjwing2o40007ebdkasxcxzyd","modified":1,"renderable":0},{"_id":"source/_posts/hello-world/version.png","post":"cjwing2o20006ebdkrx3apikg","slug":"version.png","modified":1,"renderable":1},{"_id":"source/_posts/maven-docker/Dockerfile内容.png","post":"cjwing2nv0002ebdkpzfr2gcr","slug":"Dockerfile内容.png","modified":1,"renderable":1},{"_id":"source/_posts/maven-docker/目录结构.png","post":"cjwing2nv0002ebdkpzfr2gcr","slug":"目录结构.png","modified":1,"renderable":1},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构1-副本.jpg","post":"cjwing2o40007ebdkasxcxzyd","slug":"ELK架构1-副本.jpg","modified":1,"renderable":1},{"_id":"source/_posts/初探ELK日志管理体系/ELK架构1.png","post":"cjwing2o40007ebdkasxcxzyd","slug":"ELK架构1.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjwing2nq0000ebdkgwxa2yk3","category_id":"cjwing2o00004ebdk8163iyyw","_id":"cjwing2oe000debdkusfwvut0"},{"post_id":"cjwing2ob000cebdk52phpjwf","category_id":"cjwing2o70009ebdkiiyorf1p","_id":"cjwing2oi000iebdkb4bm3xtj"},{"post_id":"cjwing2nv0002ebdkpzfr2gcr","category_id":"cjwing2o70009ebdkiiyorf1p","_id":"cjwing2oj000lebdk8winmifc"},{"post_id":"cjwing2o40007ebdkasxcxzyd","category_id":"cjwing2o70009ebdkiiyorf1p","_id":"cjwing2oj000mebdki1xm25h8"},{"post_id":"cjwing2o70008ebdkwccvnisu","category_id":"cjwing2o70009ebdkiiyorf1p","_id":"cjwing2ok000pebdkuedq5bk9"}],"PostTag":[{"post_id":"cjwing2nq0000ebdkgwxa2yk3","tag_id":"cjwing2o10005ebdkk8i3ltpm","_id":"cjwing2oa000bebdksuanw99c"},{"post_id":"cjwing2ob000cebdk52phpjwf","tag_id":"cjwing2o7000aebdkfd9864mi","_id":"cjwing2oi000gebdktsrdnnwx"},{"post_id":"cjwing2nv0002ebdkpzfr2gcr","tag_id":"cjwing2o7000aebdkfd9864mi","_id":"cjwing2oi000hebdkourlhipz"},{"post_id":"cjwing2o20006ebdkrx3apikg","tag_id":"cjwing2oe000febdk4lzsz8kz","_id":"cjwing2ok000oebdketfoq1jv"},{"post_id":"cjwing2o20006ebdkrx3apikg","tag_id":"cjwing2oj000kebdkdd0dzpdc","_id":"cjwing2ok000qebdk17y9fzeg"},{"post_id":"cjwing2o40007ebdkasxcxzyd","tag_id":"cjwing2oj000nebdkork0f0wc","_id":"cjwing2ol000uebdktiex294v"},{"post_id":"cjwing2o40007ebdkasxcxzyd","tag_id":"cjwing2ok000rebdkt5crjzwq","_id":"cjwing2ol000vebdk335uf5yh"},{"post_id":"cjwing2o40007ebdkasxcxzyd","tag_id":"cjwing2ok000sebdkfik6wrir","_id":"cjwing2ol000webdk2zyd4h0h"},{"post_id":"cjwing2o70008ebdkwccvnisu","tag_id":"cjwing2ol000tebdkgokv5ukf","_id":"cjwing2ol000xebdkhatwif0e"}],"Tag":[{"name":"Git","_id":"cjwing2o10005ebdkk8i3ltpm"},{"name":"Docker","_id":"cjwing2o7000aebdkfd9864mi"},{"name":"Hexo","_id":"cjwing2oe000febdk4lzsz8kz"},{"name":"GitHub","_id":"cjwing2oj000kebdkdd0dzpdc"},{"name":"ElasticSearch","_id":"cjwing2oj000nebdkork0f0wc"},{"name":"Logstash","_id":"cjwing2ok000rebdkt5crjzwq"},{"name":"Kibana","_id":"cjwing2ok000sebdkfik6wrir"},{"name":"Session","_id":"cjwing2ol000tebdkgokv5ukf"}]}}